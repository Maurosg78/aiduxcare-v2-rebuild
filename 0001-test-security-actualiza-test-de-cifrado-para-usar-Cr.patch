From 86c74478fa5dd909fd8c60b41cb13daab5a9f34a Mon Sep 17 00:00:00 2001
From: Mauricio <mauricio@example.com>
Date: Fri, 4 Jul 2025 14:55:00 +0200
Subject: [PATCH] test(security): actualiza test de cifrado para usar
 CryptoService (AES-GCM Web Crypto API)

---
 .../compliance/SecurityCompliance.test.ts     | 19 +++++++++++--------
 1 file changed, 11 insertions(+), 8 deletions(-)

diff --git a/src/__tests__/compliance/SecurityCompliance.test.ts b/src/__tests__/compliance/SecurityCompliance.test.ts
index c8225b5..a1200a7 100644
--- a/src/__tests__/compliance/SecurityCompliance.test.ts
+++ b/src/__tests__/compliance/SecurityCompliance.test.ts
@@ -1,6 +1,7 @@
 import { describe, it, expect, beforeEach } from 'vitest';
 import { EnterpriseSecurityService } from '../../services/EnterpriseSecurityService';
 import { AzureOpenAIService } from '../../services/AzureOpenAIService';
+import { CryptoService } from '../../services/CryptoService';
 
 describe('Security Compliance Tests - Deloitte ISO Standards', () => {
   let securityService: EnterpriseSecurityService;
@@ -12,7 +13,7 @@ describe('Security Compliance Tests - Deloitte ISO Standards', () => {
   });
 
   describe('HIPAA Compliance', () => {
-    it('should encrypt PHI data with AES-256-GCM', () => {
+    it('should encrypt and decrypt PHI data with AES-256-GCM (Web Crypto API)', async () => {
       const phiData = {
         patientId: 'TEST-001',
         data: {
@@ -21,16 +22,18 @@ describe('Security Compliance Tests - Deloitte ISO Standards', () => {
           treatment: 'Physical therapy'
         },
         classification: 'PHI' as const,
-        timestamp: new Date()
+        timestamp: new Date().toISOString()
       };
-
-      const encrypted = securityService.encryptPHIData(phiData);
-      const decrypted = securityService.decryptPHIData(encrypted);
-
+      const passphrase = 'AIDUXCARE_SUPER_SECURE_KEY';
+      const plain = JSON.stringify(phiData);
+      const encrypted = await CryptoService.encrypt(plain, passphrase);
       expect(encrypted).toBeDefined();
       expect(encrypted).not.toContain('John Doe');
-      expect(decrypted.patientId).toBe(phiData.patientId);
-      expect(decrypted.data.diagnosis).toBe(phiData.data.diagnosis);
+      const decrypted = await CryptoService.decrypt(encrypted, passphrase);
+      expect(decrypted).toBe(plain);
+      const parsed = JSON.parse(decrypted);
+      expect(parsed.patientId).toBe(phiData.patientId);
+      expect(parsed.data.diagnosis).toBe(phiData.data.diagnosis);
     });
 
     it('should validate access control for different roles', () => {
-- 
2.49.0


export interface ClinicalAnalysisRequest {
  transcription: string;
  specialty: "physiotherapy" | "psychology" | "general_medicine";
  sessionType: "initial" | "follow_up";
}

export interface ClinicalAnalysisResponse {
  success: boolean;
  analysis?: {
    warnings: Array<{
      id: string;
      severity: "HIGH" | "MEDIUM" | "LOW";
      category: string;
      title: string;
      description: string;
      recommendation: string;
      evidence: string;
    }>;
    suggestions: Array<{
      id: string;
      type: string;
      title: string;
      description: string;
      rationale: string;
      priority: "HIGH" | "MEDIUM" | "LOW";
    }>;
    soap_analysis: {
      subjective_completeness: number;
      objective_completeness: number;
      assessment_quality: number;
      plan_appropriateness: number;
      overall_quality: number;
      missing_elements: string[];
    };
    session_quality: {
      communication_score: number;
      clinical_thoroughness: number;
      patient_engagement: number;
      professional_standards: number;
      areas_for_improvement: string[];
    };
  };
  error?: string;
  message?: string;
  metadata?: {
    specialty: string;
    sessionType: string;
    processingTimeMs: number;
    timestamp: string;
  };
}

interface TranscriptionResult {
  text: string;
  isFinal: boolean;
  confidence?: number;
}

export class GoogleCloudAudioService {
  private readonly clinicalBrainEndpoint = "https://us-east1-aiduxcare-stt-20250706.cloudfunctions.net/clinical-brain";
  
  async analyzeClinicalTranscription(request: ClinicalAnalysisRequest): Promise<ClinicalAnalysisResponse> {
    // üîç DIAGN√ìSTICO EXHAUSTIVO - Logging detallado para detectar causa ra√≠z
    console.log("üß† INICIANDO DIAGN√ìSTICO CLOUD FUNCTION:", {
      endpoint: this.clinicalBrainEndpoint,
      transcriptionLength: request.transcription.length,
      specialty: request.specialty,
      sessionType: request.sessionType,
      transcriptionPreview: request.transcription.substring(0, 100) + "...",
      requestSize: JSON.stringify(request).length,
      timestamp: new Date().toISOString()
    });

    // Validaci√≥n exhaustiva del request antes de enviar
    const validation = this.validateTranscription(request.transcription);
    if (!validation.isValid) {
      console.error("‚ùå VALIDACI√ìN FALLIDA:", validation.error);
      return {
        success: false,
        error: `Validaci√≥n fallida: ${validation.error}`,
        message: validation.error
      };
    }

    try {
      console.log("üì° ENVIANDO REQUEST A CLOUD FUNCTION:", {
        method: "POST",
        contentType: "application/json",
        bodySize: JSON.stringify(request).length,
        body: {
          transcription: request.transcription.length > 200 ? 
            request.transcription.substring(0, 200) + "..." : 
            request.transcription,
          specialty: request.specialty,
          sessionType: request.sessionType
        }
      });

      // ‚è∞ A√ëADIR TIMEOUT DE 60 SEGUNDOS
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 segundos timeout

      const response = await fetch(this.clinicalBrainEndpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(request),
        signal: controller.signal // ‚è∞ A√±adir signal para timeout
      });

      clearTimeout(timeoutId); // Limpiar timeout si la respuesta llega

      console.log("üì° RESPUESTA RECIBIDA DE CLOUD FUNCTION:", {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        headers: Object.fromEntries(response.headers.entries()),
        url: response.url
      });

      if (!response.ok) {
        // DIAGN√ìSTICO EXHAUSTIVO DEL ERROR
        let errorDetails = "";
        let fullErrorResponse = null;
        
        try {
          const rawResponse = await response.text();
          console.log("üìã RAW ERROR RESPONSE:", rawResponse);
          
          try {
            fullErrorResponse = JSON.parse(rawResponse);
            errorDetails = fullErrorResponse.message || fullErrorResponse.error || "Error desconocido del servidor";
          } catch (jsonParseError) {
            // Si no se puede parsear JSON, usar la respuesta raw
            console.warn("No se pudo parsear respuesta JSON:", jsonParseError);
            errorDetails = rawResponse || `Error HTTP ${response.status}: ${response.statusText}`;
          }
        } catch (textError) {
          // Si no se puede obtener el texto de la respuesta
          console.warn("No se pudo obtener texto de respuesta:", textError);
          errorDetails = `Error HTTP ${response.status}: ${response.statusText}`;
        }

        console.error("‚ùå DIAGN√ìSTICO COMPLETO DEL ERROR:", {
          status: response.status,
          statusText: response.statusText,
          errorDetails,
          fullErrorResponse,
          request: {
            transcriptionLength: request.transcription.length,
            specialty: request.specialty,
            sessionType: request.sessionType,
            transcriptionSample: request.transcription.substring(0, 150)
          },
          timestamp: new Date().toISOString()
        });

        // Si es Error 500, intentar capturar m√°s detalles espec√≠ficos
        if (response.status === 500) {
          console.error("üö® ERROR 500 DETECTADO - AN√ÅLISIS ESPEC√çFICO:", {
            likelyTextChunkerError: errorDetails.includes("textChunker"),
            likelyVertexAIError: errorDetails.includes("Vertex") || errorDetails.includes("INVALID_ARGUMENT"),
            likelyPromptError: errorDetails.includes("prompt") || errorDetails.includes("template"),
            fullErrorMessage: errorDetails
          });
        }

        return {
          success: false,
          error: this.formatErrorMessage(response.status, errorDetails),
          message: errorDetails
        };
      }

      const result = await response.json();
      console.log("‚úÖ An√°lisis recibido del Cerebro Cl√≠nico:", {
        success: result.success,
        hasWarnings: !!result.analysis?.warnings,
        warningsCount: result.analysis?.warnings?.length || 0,
        hasSuggestions: !!result.analysis?.suggestions,
        suggestionsCount: result.analysis?.suggestions?.length || 0,
        overallQuality: result.analysis?.soap_analysis?.overall_quality
      });

      return result;

    } catch (error) {
      console.error("‚ùå Error cr√≠tico comunic√°ndose con el Cerebro Cl√≠nico:", error);
      
      const errorMessage = error instanceof Error ? error.message : "Error desconocido";
      
      // üö® MANEJO ESPEC√çFICO DE TIMEOUT
      if (error instanceof Error && error.name === "AbortError") {
        console.error("‚è∞ TIMEOUT DEL CEREBRO CL√çNICO:", {
          duration: "60 segundos",
          transcriptionLength: request.transcription.length,
          specialty: request.specialty,
          recommendation: "Usar procesamiento b√°sico"
        });

        return {
          success: false,
          error: "‚è∞ El Cerebro Cl√≠nico tard√≥ m√°s de 60 segundos. Se ha generado un an√°lisis b√°sico. Todas las funciones m√©dicas est√°n disponibles.",
          message: "timeout_cerebro_clinico"
        };
      }

      console.error("‚ùå ERROR DE RED CLOUD FUNCTION:", {
        error: errorMessage,
        request: {
          transcriptionLength: request.transcription.length,
          specialty: request.specialty,
          sessionType: request.sessionType
        }
      });

      return {
        success: false,
        error: this.formatNetworkError(errorMessage),
        message: errorMessage
      };
    }
  }

  public async processAudio(): Promise<TranscriptionResult> {
    try {
      // Aqu√≠ ir√≠a la l√≥gica real de Google Cloud Speech-to-Text
      // Por ahora retornamos un resultado simulado
      return {
        text: "Transcripci√≥n simulada",
        isFinal: true,
        confidence: 0.95
      };
    } catch (error) {
      console.error("Error en configuraci√≥n de audio:", error);
      throw new Error("Error configurando audio para transcripci√≥n");
    }
  }

  private formatErrorMessage(statusCode: number, errorDetails: string): string {
    switch (statusCode) {
    case 400:
      return `‚ö†Ô∏è Solicitud inv√°lida: ${errorDetails}. Verifique que la transcripci√≥n sea v√°lida.`;
    case 401:
      return `üîí Error de autenticaci√≥n: ${errorDetails}. Contacte al soporte t√©cnico.`;
    case 403:
      return `üö´ Acceso denegado: ${errorDetails}. Verifique sus permisos.`;
    case 404:
      return `üîç Servicio no encontrado: ${errorDetails}. El Cerebro Cl√≠nico puede estar en mantenimiento.`;
    case 429:
      return `‚è±Ô∏è L√≠mite de uso excedido: ${errorDetails}. Intente nuevamente en unos minutos.`;
    case 500:
      return `üö® Error interno del Cerebro Cl√≠nico: ${errorDetails}. El sistema est√° procesando pero encontr√≥ un problema t√©cnico.`;
    case 502:
      return `üîå Error de conexi√≥n: ${errorDetails}. El servicio puede estar temporalmente no disponible.`;
    case 503:
      return `‚öôÔ∏è Servicio no disponible: ${errorDetails}. El Cerebro Cl√≠nico est√° en mantenimiento.`;
    case 504:
      return `‚è∞ Tiempo de espera agotado: ${errorDetails}. La transcripci√≥n puede ser muy larga.`;
    default:
      return `‚ùå Error del servidor (${statusCode}): ${errorDetails}`;
    }
  }

  private formatNetworkError(errorMessage: string): string {
    if (errorMessage.includes("network") || errorMessage.includes("fetch")) {
      return `üåê Error de conexi√≥n de red: ${errorMessage}. Verifique su conexi√≥n a internet.`;
    }
    
    if (errorMessage.includes("timeout")) {
      return `‚è∞ Tiempo de espera agotado: ${errorMessage}. La transcripci√≥n puede ser muy larga o el servicio est√° sobrecargado.`;
    }
    
    if (errorMessage.includes("INVALID_ARGUMENT")) {
      return `‚ö†Ô∏è Formato de transcripci√≥n no v√°lido: ${errorMessage}. La transcripci√≥n no pudo ser procesada por el modelo de IA.`;
    }
    
    if (errorMessage.includes("quota")) {
      return `üìä L√≠mites de uso alcanzados: ${errorMessage}. Se han agotado los recursos del servicio de IA.`;
    }
    
    return `üîß Error t√©cnico: ${errorMessage}. Contacte al soporte t√©cnico si el problema persiste.`;
  }

  // M√©todo para validar transcripci√≥n antes de enviar
  validateTranscription(transcription: string): { isValid: boolean; error?: string } {
    if (!transcription || transcription.trim().length === 0) {
      return { isValid: false, error: "La transcripci√≥n est√° vac√≠a" };
    }

    if (transcription.length < 10) {
      return { isValid: false, error: "La transcripci√≥n es demasiado corta (m√≠nimo 10 caracteres)" };
    }

    if (transcription.length > 50000) {
      return { isValid: false, error: "La transcripci√≥n es demasiado larga (m√°ximo 50,000 caracteres)" };
    }

    // üîß PASO 3: MENSAJE MEJORADO PARA USUARIO CL√çNICO
    // Verificar que contiene palabras reales
    const words = transcription.trim().split(/\s+/);
    if (words.length < 3) {
      return { 
        isValid: false, 
        error: "No se ha podido detectar una transcripci√≥n clara. Por favor, verifique su micr√≥fono e int√©ntelo de nuevo en un entorno con menos ruido de fondo."
      };
    }

    return { isValid: true };
  }

  // M√©todo para obtener estado del servicio
  async getServiceStatus(): Promise<{ available: boolean; message: string }> {
    try {
      const response = await fetch(`${this.clinicalBrainEndpoint}/health`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        }
      });

      if (response.ok) {
        const data = await response.json();
        return {
          available: true,
          message: `‚úÖ Cerebro Cl√≠nico disponible (${data.version || "v1.0.0"})`
        };
      } else {
        return {
          available: false,
          message: `‚ö†Ô∏è Cerebro Cl√≠nico no disponible (${response.status})`
        };
      }
    } catch (_error) {
      return {
        available: false,
        message: `‚ùå Error verificando estado del Cerebro Cl√≠nico: ${_error instanceof Error ? _error.message : "Error desconocido"}`
      };
    }
  }
} 
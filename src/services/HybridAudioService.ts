import GoogleCloudAudioService from './GoogleCloudAudioService';

/**
 * Servicio de audio m√©dico con Google Cloud Speech-to-Text
 * Optimizado para consultas m√©dicas profesionales
 */
export default class HybridAudioService {
  private googleCloudService: GoogleCloudAudioService;

  constructor() {
    // Usar Google Cloud Speech-to-Text como servicio principal
    this.googleCloudService = new GoogleCloudAudioService();
    
    console.log('üéôÔ∏è HybridAudioService inicializado con Google Cloud');
  }

  // Informaci√≥n clara del servicio
  getDetailedServiceInfo(): string {
    const isSupported = this.googleCloudService.isServiceSupported();
    
    if (isSupported) {
      return `üéôÔ∏è Google Cloud Speech-to-Text (Transcripci√≥n profesional m√©dica)`;
    } else {
      return `‚ùå Google Cloud Speech-to-Text no disponible en este navegador`;
    }
  }

  // Iniciar grabaci√≥n
  async startRecording(callback: (text: string, isFinal: boolean) => void): Promise<void> {
    try {
      console.log('üéôÔ∏è Iniciando grabaci√≥n con Google Cloud...');
      await this.googleCloudService.startRecording(callback);
    } catch (error) {
      console.error('‚ùå Error al iniciar grabaci√≥n:', error);
      throw error;
    }
  }

  // Detener grabaci√≥n
  stopRecording(): void {
    try {
      console.log('üõë Deteniendo grabaci√≥n...');
      this.googleCloudService.stopRecording();
    } catch (error) {
      console.error('‚ùå Error al detener grabaci√≥n:', error);
    }
  }

  // Verificar si est√° grabando
  isRecording(): boolean {
    return this.googleCloudService.getIsRecording();
  }

  // Verificar si el servicio est√° soportado
  isServiceSupported(): boolean {
    return this.googleCloudService.isServiceSupported();
  }

  // Obtener nombre del servicio
  getServiceDisplayName(): string {
    return 'üéôÔ∏è Google Cloud Speech-to-Text';
  }

  // Limpiar recursos
  cleanup(): void {
    this.googleCloudService.cleanup();
  }
} 
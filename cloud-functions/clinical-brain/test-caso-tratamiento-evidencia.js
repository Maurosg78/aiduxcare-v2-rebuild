#!/usr/bin/env node

/**
 * EVALUACI√ìN PLAN DE TRATAMIENTO BASADO EN EVIDENCIA
 * 
 * Caso cl√≠nico SIN banderas rojas que prueba la capacidad de AiDuxCare
 * para generar planes de tratamiento fisioterap√©utico competentes.
 */

// Importar servicios
const ClinicalInsightService = require('./src/services/ClinicalInsightService');
const VertexAIClient = require('./src/services/VertexAIClient');

// Configurar logging simple
const log = (message, data = {}) => {
  console.log(`[${new Date().toISOString()}] ${message}`, data);
};

// Caso cl√≠nico: Dolor lumbar mec√°nico (sin banderas rojas)
const casoTratamientoEvidencia = `
FISIOTERAPEUTA: Buenos d√≠as, ¬øen qu√© puedo ayudarle hoy?

PACIENTE: Hola doctora. Vengo porque desde hace 2 semanas tengo dolor de espalda que me est√° molestando bastante en el trabajo.

FISIOTERAPEUTA: ¬øPuede describirme el dolor? ¬øD√≥nde exactamente y c√≥mo es?

PACIENTE: Es en la parte baja de la espalda, aqu√≠ en el centro. Es como un dolor sordo que se vuelve m√°s intenso cuando me quedo mucho tiempo sentado en el trabajo o cuando me agacho para levantar algo. Por las ma√±anas al levantarme me siento un poco r√≠gido, pero despu√©s de moverme unos 15-20 minutos se me pasa.

FISIOTERAPEUTA: ¬øHubo algo espec√≠fico que lo desencaden√≥?

PACIENTE: Creo que s√≠. Hace como 3 semanas estuve ayudando a un amigo a mudarse, cargu√© varias cajas pesadas. Al principio no sent√≠ nada, pero unos d√≠as despu√©s comenz√≥ este dolor.

FISIOTERAPEUTA: ¬øEl dolor se extiende hacia las piernas o se queda solo en la espalda?

PACIENTE: Se queda en la espalda principalmente. A veces siento como una tensi√≥n que baja un poquito hacia los gl√∫teos, pero no llega a las piernas ni siento hormigueos.

FISIOTERAPEUTA: ¬øQu√© posiciones o actividades lo empeoran o lo mejoran?

PACIENTE: Definitivamente empeora cuando estoy sentado mucho tiempo en la oficina, especialmente despu√©s del almuerzo. Tambi√©n cuando me agacho para recoger algo del suelo o cuando trato de cargar las bolsas del supermercado. Lo que me alivia es caminar, cuando salgo a dar una vuelta en el parque me siento mejor. Y por las noches, cuando me acuesto y me estiro, tambi√©n mejora.

FISIOTERAPEUTA: ¬øHa tomado alg√∫n medicamento?

PACIENTE: S√≠, he tomado ibuprofeno 400mg unas pocas veces cuando el dolor era m√°s fuerte, y s√≠ me ayuda. Pero prefiero no depender de medicamentos.

FISIOTERAPEUTA: ¬øHace ejercicio regularmente?

PACIENTE: Bueno, ah√≠ est√° el problema. Antes iba al gimnasio 3 veces por semana, pero desde que cambi√© de trabajo hace 6 meses, paso mucho m√°s tiempo sentado y he dejado de hacer ejercicio. Trabajo en sistemas, estoy frente a la computadora como 8-9 horas al d√≠a.

FISIOTERAPEUTA: ¬øHa tenido episodios similares antes?

PACIENTE: Hace como 2 a√±os tuve algo parecido, pero m√°s leve. En esa ocasi√≥n se me quit√≥ solo despu√©s de unas semanas. Pero esta vez parece m√°s persistente.

FISIOTERAPEUTA: Muy bien, ahora voy a examinarlo. ¬øPuede ponerse de pie y caminar un poco?

PACIENTE: S√≠, claro. (Camina sin dificultad, marcha normal)

FISIOTERAPEUTA: Ahora voy a revisar sus movimientos. Incl√≠nese hacia adelante como si fuera a tocar los dedos de los pies.

PACIENTE: (Se inclina hacia adelante con limitaci√≥n moderada, alcanza hasta media pantorrilla) S√≠, aqu√≠ siento que se tensa y duele un poco.

FISIOTERAPEUTA: ¬øY hacia atr√°s? Incl√≠nese hacia atr√°s suavemente.

PACIENTE: (Extensi√≥n limitada por dolor) Aqu√≠ tambi√©n siento molestia, como que me aprieta.

FISIOTERAPEUTA: ¬øPuede girarse hacia la derecha y hacia la izquierda?

PACIENTE: (Rotaci√≥n levemente limitada bilateral) S√≠, puedo, pero siento un poco de tirantez.

FISIOTERAPEUTA: Ahora voy a revisar la fuerza en sus piernas. Empuje mi mano con el pie... muy bien, fuerza normal. ¬øSiente esto? (Prueba sensibilidad)

PACIENTE: S√≠, siento normal.

FISIOTERAPEUTA: Voy a palpar la zona dolorosa. ¬øAqu√≠?

PACIENTE: S√≠, justo ah√≠ est√° sensible. Y tambi√©n aqu√≠ en los m√∫sculos de los lados.

FISIOTERAPEUTA: Sus reflejos est√°n normales. Veo que tiene una postura un poco encorvada, probablemente por el trabajo en computadora. Sus m√∫sculos del core est√°n d√©biles y los flexores de cadera acortados.

PACIENTE: ¬øQu√© me recomienda doctora? ¬øNecesito estudios?

FISIOTERAPEUTA: Por los s√≠ntomas y el examen, esto parece un dolor lumbar mec√°nico relacionado con la sobrecarga, el sedentarismo y la mala postura. No veo necesidad de estudios por ahora. Creo que podemos ayudarle mucho con fisioterapia.

PACIENTE: ¬øCu√°nto tiempo tomar√° mejorar? ¬øY qu√© tipo de ejercicios necesito?

FISIOTERAPEUTA: Con un programa adecuado de ejercicios, correcci√≥n postural y cambios en sus h√°bitos, deber√≠amos ver mejor√≠a en 2-4 semanas. Le voy a dise√±ar un programa espec√≠fico.
`;

/**
 * Criterios de evaluaci√≥n para plan de tratamiento basado en evidencia
 */
const criteriosEvaluacion = {
  objetivosFuncionales: {
    peso: 25,
    criterios: [
      'Objetivos SMART (espec√≠ficos, medibles, alcanzables)',
      'Relacionados con actividades de vida diaria',
      'Tiempo de logro definido',
      'Funcionales (no solo reducci√≥n de dolor)'
    ]
  },
  planTratamiento: {
    peso: 30,
    criterios: [
      'Ejercicios de fortalecimiento core',
      'Ejercicios de flexibilidad/movilidad',
      'Correcci√≥n postural',
      'Educaci√≥n en higiene postural',
      'Progresi√≥n gradual del programa'
    ]
  },
  evidenciaCientifica: {
    peso: 25,
    criterios: [
      'Menciona principios basados en evidencia',
      'T√©cnicas validadas para dolor lumbar mec√°nico',
      'Enfoque multimodal',
      'Consideraciones de adherencia'
    ]
  },
  seguimientoPrevencion: {
    peso: 20,
    criterios: [
      'Plan de seguimiento estructurado',
      'Estrategias de prevenci√≥n',
      'Educaci√≥n del paciente',
      'Modificaciones del entorno laboral'
    ]
  }
};

/**
 * Eval√∫a la calidad del plan de tratamiento generado
 * CORREGIDO: Mejor acceso a los datos del resultado
 */
function evaluarPlanTratamiento(resultado) {
  let puntajeTotal = 0;
  const evaluacionDetallada = {};

  console.log('üîç ESTRUCTURA DEL RESULTADO RECIBIDO:', {
    tipo: typeof resultado,
    claves: Object.keys(resultado || {}),
    tieneSOAP: !!resultado.soap_note,
    tieneObjetivos: !!resultado.functional_goals,
    tieneTecnicas: !!resultado.treatment_techniques
  });

  // Acceder correctamente a los datos del resultado
  const soapNote = resultado.soap_note || {};
  const objetivos = resultado.functional_goals || soapNote.functional_goals || [];
  const tecnicas = resultado.treatment_techniques || soapNote.treatment_techniques || [];
  const planTratamiento = soapNote.plan || resultado.plan || '';
  const assessment = soapNote.assessment || resultado.assessment || '';
  
  // 1. Evaluar objetivos funcionales (25 puntos)
  let puntajeObjetivos = 0;
  evaluacionDetallada.objetivos = {
    criterios: 'Objetivos funcionales SMART y espec√≠ficos',
    puntaje: 0,
    detalles: []
  };
  
  if (objetivos && Array.isArray(objetivos) && objetivos.length >= 3) {
    puntajeObjetivos += 8;
    evaluacionDetallada.objetivos.detalles.push('‚úÖ Cantidad adecuada (3+)');
  }
  
  // Buscar objetivos en el texto del plan si no est√°n en array
  const textoCompleto = `${planTratamiento} ${assessment} ${JSON.stringify(resultado)}`;
  
  if (textoCompleto.toLowerCase().includes('trabajo') || textoCompleto.toLowerCase().includes('laboral')) {
    puntajeObjetivos += 5;
    evaluacionDetallada.objetivos.detalles.push('‚úÖ Incluye objetivos laborales');
  }
  
  if (textoCompleto.toLowerCase().includes('semana') || textoCompleto.toLowerCase().includes('mes')) {
    puntajeObjetivos += 5;
    evaluacionDetallada.objetivos.detalles.push('‚úÖ Incluye tiempo espec√≠fico');
  }
  
  if (textoCompleto.toLowerCase().includes('eva') || textoCompleto.toLowerCase().includes('dolor')) {
    puntajeObjetivos += 4;
    evaluacionDetallada.objetivos.detalles.push('‚úÖ Incluye medici√≥n dolor');
  }
  
  if (textoCompleto.toLowerCase().includes('funcional')) {
    puntajeObjetivos += 3;
    evaluacionDetallada.objetivos.detalles.push('‚úÖ Enfoque funcional');
  }
  
  evaluacionDetallada.objetivos.puntaje = Math.min(puntajeObjetivos, 25);
  puntajeTotal += evaluacionDetallada.objetivos.puntaje;

  // 2. Evaluar plan de tratamiento (30 puntos)
  let puntajePlan = 0;
  evaluacionDetallada.plan = {
    criterios: 'T√©cnicas de tratamiento espec√≠ficas y basadas en evidencia',
    puntaje: 0,
    detalles: []
  };
  
  const tecnicasEsperadas = [
    'movilizaci√≥n', 'estabilizaci√≥n', 'fortalecimiento', 'flexibilidad', 
    'ergonom√≠a', 'educaci√≥n', 'ejercicio', 'control motor'
  ];
  
  tecnicasEsperadas.forEach(tecnica => {
    if (textoCompleto.toLowerCase().includes(tecnica)) {
      puntajePlan += 3;
      evaluacionDetallada.plan.detalles.push(`‚úÖ Incluye ${tecnica}`);
    }
  });
  
  // Evaluar si hay t√©cnicas espec√≠ficas
  if (tecnicas && Array.isArray(tecnicas) && tecnicas.length >= 3) {
    puntajePlan += 6;
    evaluacionDetallada.plan.detalles.push('‚úÖ Lista t√©cnicas espec√≠ficas');
  }
  
  evaluacionDetallada.plan.puntaje = Math.min(puntajePlan, 30);
  puntajeTotal += evaluacionDetallada.plan.puntaje;

  // 3. Evaluar evidencia cient√≠fica (25 puntos)
  let puntajeEvidencia = 0;
  evaluacionDetallada.evidencia = {
    criterios: 'Referencias a evidencia cient√≠fica y mejores pr√°cticas',
    puntaje: 0,
    detalles: []
  };
  
  const evidenciaTerminos = [
    'evidencia', 'estudios', 'investigaci√≥n', 'gu√≠as cl√≠nicas', 
    'recomendaciones', 'efectividad', 'protocolo'
  ];
  
  evidenciaTerminos.forEach(termino => {
    if (textoCompleto.toLowerCase().includes(termino)) {
      puntajeEvidencia += 3;
      evaluacionDetallada.evidencia.detalles.push(`‚úÖ Menciona ${termino}`);
    }
  });
  
  // Bonificaci√≥n por evaluaci√≥n sistem√°tica
  if (textoCompleto.toLowerCase().includes('evaluaci√≥n') && textoCompleto.toLowerCase().includes('reevaluaci√≥n')) {
    puntajeEvidencia += 4;
    evaluacionDetallada.evidencia.detalles.push('‚úÖ Incluye reevaluaci√≥n sistem√°tica');
  }
  
  evaluacionDetallada.evidencia.puntaje = Math.min(puntajeEvidencia, 25);
  puntajeTotal += evaluacionDetallada.evidencia.puntaje;

  // 4. Evaluar seguimiento y prevenci√≥n (20 puntos)
  let puntajeSeguimiento = 0;
  evaluacionDetallada.seguimiento = {
    criterios: 'Plan de seguimiento y estrategias de prevenci√≥n',
    puntaje: 0,
    detalles: []
  };
  
  const seguimientoTerminos = [
    'seguimiento', 'control', 'progresi√≥n', 'prevenci√≥n', 
    'mantenimiento', 'autocuidado', 'adherencia'
  ];
  
  seguimientoTerminos.forEach(termino => {
    if (textoCompleto.toLowerCase().includes(termino)) {
      puntajeSeguimiento += 2;
      evaluacionDetallada.seguimiento.detalles.push(`‚úÖ Incluye ${termino}`);
    }
  });
  
  // Bonificaci√≥n por educaci√≥n del paciente
  if (textoCompleto.toLowerCase().includes('educaci√≥n') || textoCompleto.toLowerCase().includes('ense√±ar')) {
    puntajeSeguimiento += 6;
    evaluacionDetallada.seguimiento.detalles.push('‚úÖ Incluye educaci√≥n del paciente');
  }
  
  evaluacionDetallada.seguimiento.puntaje = Math.min(puntajeSeguimiento, 20);
  puntajeTotal += evaluacionDetallada.seguimiento.puntaje;

  // Calcular nivel de competencia
  const porcentaje = (puntajeTotal / 100) * 100;
  let nivelCompetencia;
  
  if (porcentaje >= 85) {
    nivelCompetencia = 'EXCELENTE - Listo para uso cl√≠nico';
  } else if (porcentaje >= 70) {
    nivelCompetencia = 'BUENO - Competente para pr√°ctica cl√≠nica';
  } else if (porcentaje >= 60) {
    nivelCompetencia = 'ACEPTABLE - Requiere supervisi√≥n';
  } else {
    nivelCompetencia = 'INSUFICIENTE - Requiere mejoras significativas';
  }

  return {
    puntajeTotal,
    porcentaje,
    nivelCompetencia,
    evaluacionDetallada
  };
}

/**
 * Funci√≥n principal de evaluaci√≥n
 */
async function evaluarCapacidadTratamiento() {
  try {
    log('üéØ EVALUACI√ìN PLAN DE TRATAMIENTO BASADO EN EVIDENCIA');
    
    // Inicializar servicios
    const vertexClient = new VertexAIClient();
    const clinicalService = new ClinicalInsightService(vertexClient);
    
    log('üìä PROCESANDO CASO LUMBAR MEC√ÅNICO', {
      transcriptionLength: casoTratamientoEvidencia.length,
      tipoCase: 'Sin banderas rojas - Tratamiento basado en evidencia',
      modeloEsperado: 'gemini-2.5-flash (caso est√°ndar)'
    });
    
    // Procesar transcripci√≥n
    const startTime = Date.now();
    const result = await clinicalService.processTranscription(casoTratamientoEvidencia, 'physiotherapy');
    const processingTime = (Date.now() - startTime) / 1000;
    
    log('‚úÖ PROCESAMIENTO COMPLETADO', {
      processingTime: `${processingTime.toFixed(1)}s`,
      success: result.success,
      warningsCount: result.warnings?.length || 0,
      objectivesCount: result.functional_goals?.length || 0,
      techniquesCount: result.treatment_techniques?.length || 0
    });

    // Evaluar calidad del plan de tratamiento
    const evaluacion = evaluarPlanTratamiento(result);
    
    log('üìã EVALUACI√ìN PLAN DE TRATAMIENTO', {
      puntajeTotal: `${evaluacion.puntajeTotal}/100`,
      porcentaje: `${evaluacion.porcentaje.toFixed(1)}%`,
      nivelCompetencia: evaluacion.nivelCompetencia,
      objetivosFuncionales: `${evaluacion.evaluacionDetallada.objetivos.puntaje}/25`,
      planTratamiento: `${evaluacion.evaluacionDetallada.plan.puntaje}/30`,
      evidenciaCientifica: `${evaluacion.evaluacionDetallada.evidencia.puntaje}/25`,
      seguimientoPrevencion: `${evaluacion.evaluacionDetallada.seguimiento.puntaje}/20`
    });

    // Acceder correctamente a los datos del resultado
    const soapNote = result.soap_note || {};
    const objetivos = soapNote.functional_goals || result.functional_goals || [];
    const tecnicas = soapNote.treatment_techniques || result.treatment_techniques || [];
    
    // Analizar objetivos funcionales
    if (objetivos.length > 0) {
      log('üéØ OBJETIVOS FUNCIONALES GENERADOS');
      objetivos.forEach((objetivo, i) => {
        console.log(`   ${i + 1}. ${objetivo}`);
      });
    }

    // Analizar t√©cnicas de tratamiento
    if (tecnicas.length > 0) {
      log('üîß T√âCNICAS DE TRATAMIENTO PROPUESTAS');
      tecnicas.forEach((tecnica, i) => {
        console.log(`   ${i + 1}. ${tecnica}`);
      });
    }

    // Evaluar calidad SOAP espec√≠fica para tratamiento
    const soapNoteData = soapNote || {};
    log('üìù AN√ÅLISIS SOAP PARA TRATAMIENTO', {
      subjectiveCompletitud: soapNoteData.subjective?.length || 0,
      objectiveFindings: soapNoteData.objective?.length || 0,
      assessmentQuality: soapNoteData.assessment?.length || 0,
      planSpecificity: soapNoteData.plan?.length || 0,
      terminologiaEspecializada: (soapNoteData.assessment || '').toLowerCase().includes('mec√°nico')
    });

    // Evaluar ausencia de banderas rojas (correcto)
    const warnings = result.warnings || [];
    const banderasRojasDetectadas = warnings.filter(w => w.severity === 'HIGH' || w.severity === 'CRITICAL');
    
    log('üö© EVALUACI√ìN DETECCI√ìN BANDERAS ROJAS', {
      warningsTotal: warnings.length,
      banderasRojasDetectadas: banderasRojasDetectadas.length,
      expectativa: '0 banderas rojas cr√≠ticas (caso mec√°nico simple)',
      correctoNoDeteccion: banderasRojasDetectadas.length === 0 ? 'S√ç' : 'NO - Error'
    });

    // Evaluar enfoque terap√©utico vs derivaci√≥n
    const planText = JSON.stringify(soapNoteData.plan || '');
    const enfoqueCorrect = !planText.toLowerCase().includes('derivaci√≥n urgente') && 
                          (planText.toLowerCase().includes('fisioterapia') || tecnicas.length > 0);
    
    log('üéØ EVALUACI√ìN ENFOQUE TERAP√âUTICO', {
      derivacionInnecesaria: planText.toLowerCase().includes('derivaci√≥n urgente') ? 'ERROR' : 'CORRECTO',
      enfoqueConservador: enfoqueCorrect ? 'CORRECTO' : 'ERROR',
      planTerapeuticoGenerado: tecnicas.length > 0 ? 'S√ç' : 'NO',
      objetivosFuncionalesGenerados: objetivos.length > 0 ? 'S√ç' : 'NO'
    });

    // Puntaje final compuesto
    const bonificaciones = {
      noFalsasAlarmas: banderasRojasDetectadas.length === 0 ? 5 : 0,
      enfoqueCorrect: enfoqueCorrect ? 5 : 0,
      processingTime: processingTime < 60 ? 5 : 0
    };

    const puntajeFinalAjustado = Math.min(100, evaluacion.puntajeTotal + Object.values(bonificaciones).reduce((a, b) => a + b, 0));

    log('üèÜ EVALUACI√ìN FINAL TRATAMIENTO', {
      puntajeBase: `${evaluacion.puntajeTotal}/100`,
      bonificaciones: Object.values(bonificaciones).reduce((a, b) => a + b, 0),
      puntajeFinal: `${puntajeFinalAjustado}/100`,
      competenciaClinica: evaluacion.nivelCompetencia,
      aptoPlanTratamiento: puntajeFinalAjustado >= 60 ? 'S√ç' : 'NO',
      evidenciaBasada: evaluacion.evaluacionDetallada.evidencia.puntaje >= 15 ? 'S√ç' : 'LIMITADA'
    });

    // Conclusi√≥n espec√≠fica
    if (puntajeFinalAjustado >= 75) {
      log('üéâ EXCELENTE CAPACIDAD DE PLANIFICACI√ìN TERAP√âUTICA');
      log('‚úÖ Sistema genera planes de tratamiento competentes y basados en evidencia');
      log('üöÄ Apto para uso cl√≠nico en casos est√°ndar de fisioterapia');
    } else if (puntajeFinalAjustado >= 60) {
      log('‚úÖ CAPACIDAD COMPETENTE DE PLANIFICACI√ìN TERAP√âUTICA');
      log('üîß Sistema genera planes adecuados con margen de mejora en evidencia');
    } else {
      log('‚ö†Ô∏è CAPACIDAD LIMITADA DE PLANIFICACI√ìN TERAP√âUTICA');
      log('üîß Requiere mejoras en generaci√≥n de objetivos y t√©cnicas espec√≠ficas');
    }

    return {
      success: true,
      score: puntajeFinalAjustado,
      competencia: evaluacion.nivelCompetencia,
      details: {
        objetivos: objetivos.length,
        tecnicas: tecnicas.length,
        warnings: warnings.length,
        processingTime: processingTime,
        evaluacionDetallada: evaluacion.evaluacionDetallada
      }
    };

  } catch (error) {
    log('‚ùå ERROR EN EVALUACI√ìN TRATAMIENTO', {
      message: error.message,
      stack: error.stack?.split('\n')[0]
    });

    return {
      success: false,
      error: error.message
    };
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  evaluarCapacidadTratamiento()
    .then(resultado => {
      if (resultado.success && resultado.score >= 60) {
        console.log('\nüéØ EVALUACI√ìN TRATAMIENTO EXITOSA - SISTEMA COMPETENTE PARA PLANIFICACI√ìN TERAP√âUTICA');
        process.exit(0);
      } else {
        console.log('\nüö® EVALUACI√ìN TRATAMIENTO REQUIERE MEJORAS');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• ERROR CR√çTICO:', error.message);
      process.exit(1);
    });
}

module.exports = { evaluarCapacidadTratamiento }; 
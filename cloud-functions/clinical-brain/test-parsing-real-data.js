#!/usr/bin/env node

/**
 * TEST PARSING CON DATOS REALES
 * 
 * Usa el contenido REAL generado por el sistema para probar
 * la funci√≥n de parsing mejorado
 */

const ClinicalInsightService = require('./src/services/ClinicalInsightService');

// Usar el contenido REAL exacto que genera el sistema
const realGeneratedContent = `\`\`\`json
{
  "soap_note": {
    "subjective": "Paciente femenina de 30 a√±os de edad, dise√±adora gr√°fica, acude a consulta por dolor en la espalda baja (zona lumbar), predominantemente en el lado derecho, con una duraci√≥n de 6 semanas. El dolor inici√≥ de forma gradual, sin evento traum√°tico espec√≠fico, y ha sido persistente sin mejor√≠a. Refiere que el dolor se agrava significativamente con la extensi√≥n lumbar (ej. inclinarse hacia atr√°s, alcanzar objetos en estantes altos), al caminar cuesta arriba y al bajar escaleras. Por el contrario, el dolor se alivia al sentarse por un tiempo o al inclinarse hacia adelante.",
    "objective": "A la exploraci√≥n f√≠sica se anticipan los siguientes hallazgos:\\n\\n**Observaci√≥n:** Postura en sedestaci√≥n y bipedestaci√≥n con posible rectificaci√≥n o aumento de la lordosis lumbar, o asimetr√≠a muscular en la regi√≥n lumbar derecha.",
    "assessment": "Paciente con dolor lumbar mec√°nico cr√≥nico, predominantemente derecho, con irradiaci√≥n a gl√∫teo y muslo ipsilateral, compatible con un s√≠ndrome de Derangement Posterior seg√∫n la clasificaci√≥n de McKenzie (MDT).",
    "plan": "**Objetivos a Corto Plazo (2-3 semanas):**\\n*   Reducir el dolor lumbar a un nivel de 2/10 EVA o menos.\\n*   Disminuir la rigidez matutina en un 50%."
  },
  "clinical_summary": "Paciente con dolor lumbar mec√°nico cr√≥nico de 6 semanas de evoluci√≥n, con clara preferencia direccional a la flexi√≥n lumbar y agravamiento con la extensi√≥n.",
  "functional_goals": [
    "Reducir el dolor lumbar a 0-2/10 EVA en reposo y durante actividades funcionales.",
    "Eliminar la rigidez matutina lumbar, permitiendo levantarse sin molestias en menos de 5 minutos.",
    "Retomar la nataci√≥n (ej. 30 minutos, 3 veces por semana) sin experimentar dolor lumbar.",
    "Realizar las actividades laborales (dise√±o gr√°fico frente al computador) durante 8 horas sin molestias lumbares."
  ],
  "treatment_techniques": [
    "Educaci√≥n en Neurociencia del Dolor (PNE)",
    "Movilizaciones Lumbares en Flexi√≥n",
    "Liberaci√≥n Miofascial/Masaje Terap√©utico (paravertebrales lumbares, gl√∫teos)",
    "Ejercicios de Preferencia Direccional (Flexi√≥n Lumbar Repetida - McKenzie)",
    "Ejercicios de Estabilizaci√≥n del Core (Activaci√≥n de Transversus Abdominis y Mult√≠fidus)",
    "Fortalecimiento de Musculatura Gl√∫tea",
    "Estiramientos de Flexores de Cadera e Isquiotibiales",
    "Reeducaci√≥n Postural y Asesoramiento Ergon√≥mico"
  ]
}
\`\`\``;

async function testParsingRealData() {
  console.log('üß™ INICIANDO TEST PARSING CON DATOS REALES');
  console.log('==================================================');
  
  // Inicializar el servicio
  const clinicalService = new ClinicalInsightService();
  
  console.log('\nüìù CONTENIDO REAL A PARSEAR:');
  console.log(`Longitud: ${realGeneratedContent.length}`);
  console.log(`Primeros 200 caracteres: ${realGeneratedContent.substring(0, 200)}`);
  console.log(`√öltimos 100 caracteres: ${realGeneratedContent.substring(realGeneratedContent.length - 100)}`);
  
  console.log('\nüîç INICIANDO PROCESO DE PARSING...');
  
  let resultado;
  
  // Probar la funci√≥n de parsing CON LOGGING DETALLADO
  try {
    console.log('üîç Llamando a processFinalAnalysisResult...');
    resultado = clinicalService.processFinalAnalysisResult(realGeneratedContent);
    console.log('‚úÖ Funci√≥n completada, analizando resultado...');
    
    // Logging detallado del resultado
    console.log('üéØ RESULTADO RAW:', JSON.stringify(resultado, null, 2));
    
  } catch (error) {
    console.error('‚ùå ERROR EN PARSING:', error);
    console.error('Stack trace:', error.stack);
    return;
  }
  
  console.log('\n‚úÖ RESULTADO DEL PARSING:');
  console.log('========================================');
  
  // Mostrar estructura resultante
  console.log('\nüìä ESTRUCTURA RESULTANTE:');
  console.log(`- Warnings: ${resultado.warnings ? resultado.warnings.length : 'N/A'}`);
  console.log(`- Suggestions: ${resultado.suggestions ? resultado.suggestions.length : 'N/A'}`);
  console.log(`- Functional Goals: ${resultado.functional_goals ? resultado.functional_goals.length : 'N/A'}`);
  console.log(`- Treatment Techniques: ${resultado.treatment_techniques ? resultado.treatment_techniques.length : 'N/A'}`);
  console.log(`- SOAP Complete: ${!!(resultado.soap_note && resultado.soap_note.subjective && resultado.soap_note.objective)}`);
  console.log(`- Parsing Status: ${resultado.model_info ? resultado.model_info.parsing_status : 'N/A'}`);
  console.log(`- Content Length: ${resultado.model_info ? resultado.model_info.content_length : 'N/A'}`);
  console.log(`- SOAP Quality: ${resultado.soap_quality ? resultado.soap_quality.overall : 'N/A'}`);
  
  // Continuar con el resto del an√°lisis...
  
  // Mostrar SOAP
  console.log('\nüìã CONTENIDO SOAP:');
  if (resultado.soap_note) {
    console.log(`   üìù Subjective: ${resultado.soap_note.subjective ? resultado.soap_note.subjective.substring(0, 100) + '...' : 'N/A'}`);
    console.log(`   üëÄ Objective: ${resultado.soap_note.objective ? resultado.soap_note.objective.substring(0, 100) + '...' : 'N/A'}`);
    console.log(`   üéØ Assessment: ${resultado.soap_note.assessment ? resultado.soap_note.assessment.substring(0, 100) + '...' : 'N/A'}`);
    console.log(`   üìã Plan: ${resultado.soap_note.plan ? resultado.soap_note.plan.substring(0, 100) + '...' : 'N/A'}`);
  }
  
  // Mostrar objetivos funcionales
  console.log('\nüéØ FUNCTIONAL GOALS:');
  if (resultado.functional_goals && resultado.functional_goals.length > 0) {
    resultado.functional_goals.forEach((goal, index) => {
      console.log(`   ${index + 1}. ${goal.substring(0, 100)}...`);
    });
  } else {
    console.log('   ‚ùå No se extrajeron objetivos funcionales');
  }
  
  // Mostrar t√©cnicas de tratamiento
  console.log('\nüîß TREATMENT TECHNIQUES:');
  if (resultado.treatment_techniques && resultado.treatment_techniques.length > 0) {
    resultado.treatment_techniques.forEach((technique, index) => {
      console.log(`   ${index + 1}. ${technique}`);
    });
  } else {
    console.log('   ‚ùå No se extrajeron t√©cnicas de tratamiento');
  }
  
  // Mostrar sugerencias (si las hay)
  console.log('\nüí° SUGGESTIONS:');
  if (resultado.suggestions && resultado.suggestions.length > 0) {
    resultado.suggestions.forEach((suggestion, index) => {
      console.log(`   ${index + 1}. ${suggestion.substring(0, 100)}...`);
    });
  } else {
    console.log('   ‚ùå No hay sugerencias (apropiado para este caso)');
  }
  
  // Evaluaci√≥n final
  console.log('\nüß™ EVALUACI√ìN DEL PARSING:');
  console.log('========================================');
  
  const functionalGoalsExtracted = resultado.functional_goals ? resultado.functional_goals.length : 0;
  const treatmentTechniquesExtracted = resultado.treatment_techniques ? resultado.treatment_techniques.length : 0;
  const soapComplete = !!(resultado.soap_note && resultado.soap_note.subjective && resultado.soap_note.objective && resultado.soap_note.assessment && resultado.soap_note.plan);
  
  const score = (functionalGoalsExtracted > 0 ? 25 : 0) + 
                (treatmentTechniquesExtracted > 0 ? 25 : 0) + 
                (soapComplete ? 50 : 0);
  
  console.log(`Puntaje parsing: ${score}/100`);
  console.log(`Functional Goals extra√≠dos: ${functionalGoalsExtracted}/4`);
  console.log(`Treatment Techniques extra√≠dos: ${treatmentTechniquesExtracted}/8`);
  console.log(`SOAP completo: ${soapComplete ? 'S√≠' : 'No'}`);
  
  if (score >= 95) {
    console.log('‚úÖ PARSING EXCELENTE - COMPLETAMENTE FUNCIONAL');
  } else if (score >= 75) {
    console.log('‚úÖ PARSING BUENO - LISTO PARA USO');
  } else if (score >= 50) {
    console.log('‚ö†Ô∏è PARSING PARCIAL - REQUIERE MEJORAS');
  } else {
    console.log('‚ùå PARSING DEFICIENTE - REQUIERE CORRECCI√ìN CR√çTICA');
  }
  
  console.log('\nüéâ TEST PARSING CON DATOS REALES COMPLETADO');
}

// Ejecutar el test
testParsingRealData().catch(console.error); 
const VertexAIClient = require("./src/services/VertexAIClient");
const PromptFactory = require("./src/services/PromptFactory");

/**
 * TEST FINAL DEL SISTEMA OPTIMIZADO
 * Basado en evidencia emp√≠rica de 5 casos cl√≠nicos
 */

// Casos de prueba para validar el sistema optimizado
const testCases = {
  simple_case: {
    name: "Caso Simple - Contractura Cervical",
    transcription: `
      Paciente masculino de 35 a√±os consulta por dolor cervical desde hace 3 d√≠as.
      Refiere que empez√≥ despu√©s de dormir en mala posici√≥n. Dolor localizado en cuello,
      sin irradiaci√≥n. Mejora con analg√©sicos. Sin otros s√≠ntomas asociados.
      
      Evaluaci√≥n: contractura muscular cervical, dolor a la palpaci√≥n.
      Movilidad cervical limitada por dolor. Paciente refiere mejor√≠a gradual.
    `,
    expectedModel: "gemini-2.5-flash",
    expectedRedFlags: 0,
    description: "Caso simple sin banderas rojas - debe usar modelo est√°ndar"
  },

  moderate_case: {
    name: "Caso Moderado - Una Bandera Roja",
    transcription: `
      Paciente femenina de 45 a√±os consulta por dolor lumbar desde hace 1 semana.
      Refiere dolor que baja por la pierna derecha hasta el pie. Tambi√©n menciona
      p√©rdida de fuerza en el pie derecho para levantar la punta.
      
      Sin antecedentes relevantes. Dolor empeora al toser o estornudar.
      Evaluaci√≥n: test de Las√®gue positivo, disminuci√≥n de reflejos.
    `,
    expectedModel: "gemini-2.5-flash",
    expectedRedFlags: 1,
    description: "Una bandera roja (d√©ficit neurol√≥gico) - modelo est√°ndar suficiente"
  },

  critical_case: {
    name: "Caso Cr√≠tico - M√∫ltiples Banderas Rojas",
    transcription: `
      Paciente masculino de 58 a√±os consulta por dolor tor√°cico desde hace 2 horas.
      Refiere dolor opresivo que irradia al brazo izquierdo y mand√≠bula.
      Tambi√©n presenta sudoraci√≥n profusa y disnea moderada.
      
      Antecedentes: hipertensi√≥n, diabetes, fumador. Dolor no mejora con reposo.
      Evaluaci√≥n: paciente ansioso, diafor√©tico, dolor precordial.
    `,
    expectedModel: "gemini-2.5-pro",
    expectedRedFlags: 3,
    description: "M√∫ltiples banderas rojas (dolor tor√°cico + disnea + sudoraci√≥n) - requiere modelo premium"
  }
};

async function testOptimizedSystem() {
  console.log("üß™ TESTING SISTEMA OPTIMIZADO BASADO EN EVIDENCIA EMP√çRICA");
  console.log("=".repeat(80));
  
  // Inicializar servicios
  const vertexClient = new VertexAIClient();
  const promptFactory = new PromptFactory();
  
  let totalTests = 0;
  let passedTests = 0;
  
  for (const [caseKey, testCase] of Object.entries(testCases)) {
    console.log(`\nüìã TESTING: ${testCase.name}`);
    console.log("-".repeat(60));
    console.log(`Descripci√≥n: ${testCase.description}`);
    console.log(`Banderas rojas esperadas: ${testCase.expectedRedFlags}`);
    console.log(`Modelo esperado: ${testCase.expectedModel}`);
    
    try {
      // Generar prompt
      const prompt = promptFactory.generatePrompt(testCase.transcription);
      
      // Procesar con selecci√≥n autom√°tica
      const startTime = Date.now();
      const result = await vertexClient.processTranscription(
        testCase.transcription,
        prompt
      );
      const processingTime = (Date.now() - startTime) / 1000;
      
      // Verificar resultados
      const modelUsed = result.costOptimization.modelUsed;
      const redFlagsDetected = result.costOptimization.redFlagsDetected;
      
      console.log("\n‚úÖ RESULTADO:");
      console.log(`   ü§ñ Modelo usado: ${modelUsed}`);
      console.log(`   üö© Banderas rojas detectadas: ${redFlagsDetected}`);
      console.log(`   ‚è±Ô∏è  Tiempo de procesamiento: ${processingTime.toFixed(1)}s`);
      console.log(`   üí∞ An√°lisis de costos: ${result.costOptimization.costAnalysis.savingsVsPro}`);
      console.log(`   üß† Razonamiento: ${result.costOptimization.reasoning}`);
      
      // Validar selecci√≥n de modelo
      totalTests++;
      if (modelUsed === testCase.expectedModel) {
        console.log(`   ‚úÖ MODELO CORRECTO: ${modelUsed}`);
        passedTests++;
      } else {
        console.log(`   ‚ùå MODELO INCORRECTO: Esperado ${testCase.expectedModel}, obtuvo ${modelUsed}`);
      }
      
      // Validar detecci√≥n de banderas rojas
      if (redFlagsDetected >= testCase.expectedRedFlags) {
        console.log(`   ‚úÖ DETECCI√ìN BANDERAS ROJAS: ${redFlagsDetected} >= ${testCase.expectedRedFlags}`);
      } else {
        console.log(`   ‚ö†Ô∏è  DETECCI√ìN PARCIAL: ${redFlagsDetected} < ${testCase.expectedRedFlags}`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå ERROR: ${error.message}`);
      totalTests++;
    }
    
    // Pausa entre tests
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  // Resumen final
  console.log("\nüìä RESUMEN DE TESTING");
  console.log("=".repeat(80));
  console.log(`Tests ejecutados: ${totalTests}`);
  console.log(`Tests exitosos: ${passedTests}`);
  console.log(`Tasa de √©xito: ${((passedTests / totalTests) * 100).toFixed(1)}%`);
  
  if (passedTests === totalTests) {
    console.log("\nüéâ ¬°SISTEMA OPTIMIZADO FUNCIONANDO PERFECTAMENTE!");
    console.log("‚úÖ Selecci√≥n autom√°tica de modelos basada en evidencia emp√≠rica");
    console.log("‚úÖ Detecci√≥n de banderas rojas cr√≠ticas");
    console.log("‚úÖ Optimizaci√≥n de costos inteligente");
    console.log("‚úÖ Preservaci√≥n de seguridad cl√≠nica");
  } else {
    console.log("\n‚ö†Ô∏è  SISTEMA REQUIERE AJUSTES");
    console.log("‚ùå Algunos casos no pasaron la validaci√≥n");
  }
  
  return {
    totalTests,
    passedTests,
    successRate: (passedTests / totalTests) * 100
  };
}

// Ejecutar test
testOptimizedSystem().catch(console.error); 
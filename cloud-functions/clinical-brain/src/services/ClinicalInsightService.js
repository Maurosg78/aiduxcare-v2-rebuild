const winston = require('winston');
const VertexAIClient = require('./VertexAIClient');
const KnowledgeBase = require('./KnowledgeBase');
const ModelSelector = require('./ModelSelector');

/**
 * ClinicalInsightService - Arquitectura de Cascada V2
 * 
 * Implementa un pipeline de an√°lisis cl√≠nico en 3 estaciones:
 * 1. Triaje de Banderas Rojas (Gemini-Flash, <5s)
 * 2. Extracci√≥n de Hechos Cl√≠nicos (Gemini-Flash, estructurado)
 * 3. An√°lisis Final y SOAP (Gemini-Pro, contextualizado)
 * 
 * @author Mauricio Sobarzo
 * @version 2.0 - Cascade Architecture
 */
class ClinicalInsightService {
  constructor() {
    this.vertexClient = new VertexAIClient();
    this.knowledgeBase = new KnowledgeBase();
    this.modelSelector = new ModelSelector(this.vertexClient);
    
    // Configurar logger
    this.logger = winston.createLogger({
      level: 'info',
      format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
      ),
      transports: [
        new winston.transports.Console()
      ]
    });
    
    this.logger.info('üèóÔ∏è ClinicalInsightService inicializado con arquitectura de cascada');
  }

  /**
   * ESTACI√ìN 1: TRIAJE DE BANDERAS ROJAS
   * 
   * Usa Gemini-Flash para identificaci√≥n r√°pida (<5s) de banderas rojas cr√≠ticas
   * Objetivo: Alert inmediato al cl√≠nico si hay emergencias
   * 
   * @param {string} transcription - Transcripci√≥n original de la consulta
   * @returns {Promise<string[]>} Array de banderas rojas detectadas
   */
  async triageRedFlags(transcription) {
    const startTime = Date.now();
    
    this.logger.info('üö© ESTACI√ìN 1: Iniciando triaje de banderas rojas', {
      transcriptionLength: transcription.length,
      model: 'gemini-2.5-flash'
    });

    try {
      // Obtener banderas rojas cr√≠ticas desde knowledge base
      const criticalRedFlags = this.knowledgeBase.getCriticalRedFlags();
      
      // Construir prompt espec√≠fico y corto para Gemini-Flash
      const triagePrompt = this._buildTriagePrompt(transcription, criticalRedFlags);
      
      // Llamada optimizada a Gemini-Flash
      const result = await this.vertexClient.processWithModel(
        transcription,
        triagePrompt,
        'gemini-2.5-flash', // Modelo r√°pido y barato
        {
          maxTokens: 500, // Respuesta corta
          temperature: 0.1 // Precisi√≥n alta, creatividad baja
        }
      );

      // Parsear resultado a array de strings
      const redFlags = this._parseRedFlagsResponse(result.text);
      
      const processingTime = (Date.now() - startTime) / 1000;
      
      this.logger.info('‚úÖ ESTACI√ìN 1: Triaje completado', {
        redFlagsDetected: redFlags.length,
        redFlags: redFlags,
        processingTime: processingTime,
        model: result.modelUsed,
        cost: result.costOptimization?.estimatedCost || 'N/A'
      });

      return redFlags;
      
    } catch (error) {
      this.logger.error('‚ùå ESTACI√ìN 1: Error en triaje de banderas rojas', {
        error: error.message,
        stack: error.stack,
        processingTime: (Date.now() - startTime) / 1000
      });
      
      // Retornar array vac√≠o en caso de error para no bloquear el pipeline
      return [];
    }
  }

  /**
   * ESTACI√ìN 2: EXTRACCI√ìN DE HECHOS CL√çNICOS
   * 
   * Usa Gemini-Flash para extraer entidades cl√≠nicas estructuradas
   * Objetivo: Base de datos limpia de hechos para an√°lisis final
   * 
   * @param {string} transcription - Transcripci√≥n original de la consulta  
   * @returns {Promise<Object>} Objeto JSON con hechos cl√≠nicos estructurados
   */
  async extractClinicalFacts(transcription) {
    const startTime = Date.now();
    
    this.logger.info('üìã ESTACI√ìN 2: Iniciando extracci√≥n de hechos cl√≠nicos', {
      transcriptionLength: transcription.length,
      model: 'gemini-2.5-flash'
    });

    try {
      // Construir prompt para extracci√≥n estructurada
      const extractionPrompt = this._buildExtractionPrompt(transcription);
      
      // Llamada optimizada a Gemini-Flash
      const result = await this.vertexClient.processWithModel(
        transcription,
        extractionPrompt,
        'gemini-2.5-flash', // Modelo r√°pido y barato
        {
          maxTokens: 1000, // Respuesta estructurada mediana
          temperature: 0.2 // Precisi√≥n alta con algo de flexibilidad
        }
      );

      // Parsear resultado a objeto JSON estructurado
      const clinicalFacts = this._parseClinicalFactsResponse(result.text);
      
      const processingTime = (Date.now() - startTime) / 1000;
      
      this.logger.info('‚úÖ ESTACI√ìN 2: Extracci√≥n completada', {
        factsExtracted: Object.keys(clinicalFacts).length,
        hasSymptoms: !!clinicalFacts.symptoms,
        hasMedications: !!clinicalFacts.medications,
        hasHistory: !!clinicalFacts.history,
        processingTime: processingTime,
        model: result.modelUsed,
        cost: result.costOptimization?.estimatedCost || 'N/A'
      });

      return clinicalFacts;
      
    } catch (error) {
      this.logger.error('‚ùå ESTACI√ìN 2: Error en extracci√≥n de hechos', {
        error: error.message,
        stack: error.stack,
        processingTime: (Date.now() - startTime) / 1000
      });
      
      // Retornar objeto vac√≠o en caso de error para no bloquear el pipeline
      return {};
    }
  }

  /**
   * ESTACI√ìN 3: AN√ÅLISIS FINAL Y GENERACI√ìN SOAP
   * 
   * Usa Gemini-Pro para an√°lisis profundo y generaci√≥n SOAP completa
   * Objetivo: An√°lisis de m√°xima calidad usando informaci√≥n pre-procesada
   * 
   * @param {string} transcription - Transcripci√≥n original
   * @param {string[]} redFlags - Banderas rojas detectadas en Estaci√≥n 1
   * @param {Object} clinicalFacts - Hechos cl√≠nicos extra√≠dos en Estaci√≥n 2
   * @returns {Promise<Object>} An√°lisis cl√≠nico completo con SOAP
   */
  async generateFinalAnalysis(transcription, redFlags, clinicalFacts) {
    const startTime = Date.now();
    
    this.logger.info('üéØ ESTACI√ìN 3: Iniciando an√°lisis final y SOAP', {
      transcriptionLength: transcription.length,
      redFlagsCount: redFlags.length,
      clinicalFactsKeys: Object.keys(clinicalFacts).length,
      model: 'gemini-2.5-pro'
    });

    try {
      // Construir super-prompt contextualizado con informaci√≥n pre-procesada
      const finalPrompt = this._buildFinalAnalysisPrompt(
        transcription, 
        redFlags, 
        clinicalFacts
      );
      
      // Llamada a Gemini-Pro para an√°lisis profundo
      const result = await this.vertexClient.processWithModel(
        transcription,
        finalPrompt,
        'gemini-2.5-pro', // Modelo potente y preciso
        {
          maxTokens: 3000, // Respuesta completa y detallada
          temperature: 0.3 // Balance entre precisi√≥n y calidad narrativa
        }
      );

      // Parsear resultado a objeto de an√°lisis cl√≠nico completo
      const finalAnalysis = this._parseFinalAnalysisResponse(result.text);
      
      const processingTime = (Date.now() - startTime) / 1000;
      
      this.logger.info('‚úÖ ESTACI√ìN 3: An√°lisis final completado', {
        hasWarnings: !!finalAnalysis.warnings,
        hasSuggestions: !!finalAnalysis.suggestions,
        hasSOAP: !!finalAnalysis.soap_analysis,
        processingTime: processingTime,
        model: result.modelUsed,
        cost: result.costOptimization?.estimatedCost || 'N/A'
      });

      return finalAnalysis;
      
    } catch (error) {
      this.logger.error('‚ùå ESTACI√ìN 3: Error en an√°lisis final', {
        error: error.message,
        stack: error.stack,
        processingTime: (Date.now() - startTime) / 1000
      });
      
      throw error; // Re-throw para manejar en nivel superior
    }
  }

  /**
   * M√âTODO PRINCIPAL: EJECUTA CASCADA COMPLETA
   * 
   * Ejecuta las 3 estaciones secuencialmente y retorna an√°lisis completo
   * 
   * @param {string} transcription - Transcripci√≥n de la consulta
   * @param {Object} options - Opciones adicionales (specialty, sessionType, etc.)
   * @returns {Promise<Object>} Resultado completo del an√°lisis con metadata
   */
  async processTranscription(transcription, options = {}) {
    const cascadeStartTime = Date.now();
    
    this.logger.info('üöÄ INICIANDO CASCADA DE AN√ÅLISIS CL√çNICO', {
      transcriptionLength: transcription.length,
      specialty: options.specialty || 'fisioterapia',
      sessionType: options.sessionType || 'initial',
      cascadeId: this._generateCascadeId()
    });

    try {
      // ESTACI√ìN 1: Triaje de Banderas Rojas (Gemini-Flash, <5s)
      const redFlags = await this.triageRedFlags(transcription);
      
      // ESTACI√ìN 2: Extracci√≥n de Hechos (Gemini-Flash, estructurado)
      const clinicalFacts = await this.extractClinicalFacts(transcription);
      
      // ESTACI√ìN 3: An√°lisis Final (Gemini-Pro, contextualizado)
      const finalAnalysis = await this.generateFinalAnalysis(
        transcription, 
        redFlags, 
        clinicalFacts
      );

      const totalCascadeTime = (Date.now() - cascadeStartTime) / 1000;

      // Ensamblar resultado final con metadata de cascada
      const cascadeResult = {
        ...finalAnalysis,
        cascade_metadata: {
          pipeline_version: '2.0-cascade',
          total_processing_time: totalCascadeTime,
          stations_completed: 3,
          station_results: {
            station1_red_flags: {
              count: redFlags.length,
              flags: redFlags
            },
            station2_clinical_facts: {
              keys_extracted: Object.keys(clinicalFacts).length,
              categories: Object.keys(clinicalFacts)
            },
            station3_final_analysis: {
              sections_generated: [
                finalAnalysis.warnings ? 'warnings' : null,
                finalAnalysis.suggestions ? 'suggestions' : null,
                finalAnalysis.soap_analysis ? 'soap_analysis' : null
              ].filter(Boolean)
            }
          },
          cost_optimization: {
            models_used: ['gemini-2.5-flash', 'gemini-2.5-flash', 'gemini-2.5-pro'],
            strategy: 'cascade-optimization',
            estimated_savings: '60-70% vs single Pro call'
          },
          timestamp: new Date().toISOString()
        }
      };

      this.logger.info('üéâ CASCADA DE AN√ÅLISIS COMPLETADA EXITOSAMENTE', {
        totalTime: totalCascadeTime,
        redFlagsDetected: redFlags.length,
        clinicalFactsExtracted: Object.keys(clinicalFacts).length,
        finalAnalysisSections: Object.keys(finalAnalysis).length,
        estimatedSavings: '60-70%'
      });

      return cascadeResult;

    } catch (error) {
      const totalTime = (Date.now() - cascadeStartTime) / 1000;
      
      this.logger.error('üí• ERROR EN CASCADA DE AN√ÅLISIS', {
        error: error.message,
        stack: error.stack,
        totalTime: totalTime,
        transcriptionLength: transcription.length
      });

      throw new Error(`Cascada de an√°lisis fall√≥: ${error.message}`);
    }
  }

  /**
   * NUEVO FLUJO INTELIGENTE: ModelSelector + An√°lisis Adaptativo
   * 
   * @param {string} transcription - Transcripci√≥n cl√≠nica a analizar  
   * @param {Object} options - Opciones de procesamiento
   * @returns {Object} An√°lisis cl√≠nico completo con metadata de decisi√≥n
   */
  async processTranscriptionWithIntelligentModel(transcription, options = {}) {
    const startTime = Date.now();
    
    this.logger.info('üöÄ INICIANDO AN√ÅLISIS CON MODELSELECTOR INTELIGENTE', {
      transcriptionLength: transcription.length,
      specialty: options.specialty || 'fisioterapia',
      sessionType: options.sessionType || 'initial'
    });

    try {
      // PASO 1: ModelSelector decide qu√© modelo usar (con triaje IA)
      const modelDecision = await this.modelSelector.selectModel(transcription);
      
      this.logger.info('üß† DECISI√ìN DE MODELO COMPLETADA', {
        selectedModel: modelDecision.selectedModel,
        reasoning: modelDecision.reasoning,
        redFlagsDetected: modelDecision.triageResult.redFlags.length,
        triageTime: modelDecision.processingTime
      });

      // PASO 2: An√°lisis completo con modelo seleccionado
      const analysisResult = await this._performCompleteAnalysis(
        transcription, 
        modelDecision.selectedModel,
        modelDecision.triageResult,
        options
      );

      const totalTime = (Date.now() - startTime) / 1000;

      // Ensamblar resultado final con metadata de ModelSelector
      const intelligentResult = {
        ...analysisResult,
        intelligent_model_metadata: {
          workflow_version: '3.0-intelligent-selector',
          total_processing_time: totalTime,
          model_decision: {
            selected_model: modelDecision.selectedModel,
            reasoning: modelDecision.reasoning,
            cost_optimization: modelDecision.costOptimization,
            triage_result: modelDecision.triageResult
          },
          performance_metrics: {
            triage_time: modelDecision.processingTime,
            analysis_time: totalTime - modelDecision.processingTime,
            total_time: totalTime
          },
          timestamp: new Date().toISOString()
        }
      };

      this.logger.info('üéâ AN√ÅLISIS INTELIGENTE COMPLETADO EXITOSAMENTE', {
        totalTime: totalTime,
        modelUsed: modelDecision.selectedModel,
        redFlagsDetected: modelDecision.triageResult.redFlags.length,
        costOptimization: modelDecision.costOptimization
      });

      return intelligentResult;

    } catch (error) {
      const totalTime = (Date.now() - startTime) / 1000;
      
      this.logger.error('üí• ERROR EN AN√ÅLISIS INTELIGENTE', {
        error: error.message,
        stack: error.stack,
        totalTime: totalTime,
        transcriptionLength: transcription.length
      });

      throw new Error(`An√°lisis inteligente fall√≥: ${error.message}`);
    }
  }

  /**
   * An√°lisis completo adaptativo seg√∫n modelo seleccionado
   */
  async _performCompleteAnalysis(transcription, selectedModel, triageResult, options) {
    const analysisStartTime = Date.now();
    
    this.logger.info('üî¨ INICIANDO AN√ÅLISIS COMPLETO', {
      model: selectedModel,
      transcriptionLength: transcription.length,
      redFlagsFromTriage: triageResult.redFlags.length
    });

    // Construir prompt completo contextualizado
    const completePrompt = this._buildIntelligentAnalysisPrompt(
      transcription, 
      triageResult, 
      options
    );

    // Configurar par√°metros seg√∫n modelo seleccionado
    const modelConfig = selectedModel === 'gemini-2.5-pro' 
      ? { maxTokens: 3000, temperature: 0.2 }  // M√°xima calidad para casos cr√≠ticos
      : { maxTokens: 2000, temperature: 0.3 }; // Eficiente para casos est√°ndar

    this.logger.info('üì§ ENVIANDO AN√ÅLISIS COMPLETO AL MODELO', {
      model: selectedModel,
      promptLength: completePrompt.length,
      config: modelConfig
    });

    const response = await this.vertexClient.processWithModel(
      transcription,
      completePrompt,
      selectedModel,
      modelConfig
    );

    const analysisTime = (Date.now() - analysisStartTime) / 1000;

    this.logger.info('‚úÖ AN√ÅLISIS COMPLETO FINALIZADO', {
      model: selectedModel,
      processingTime: analysisTime,
      responseLength: response.length
    });

    return this._parseCompleteAnalysisResponse(response);
  }

  /**
   * Prompt completo contextualizado para an√°lisis inteligente
   */
  _buildIntelligentAnalysisPrompt(transcription, triageResult, options) {
    const specialty = options.specialty || 'fisioterapia';
    const sessionType = options.sessionType || 'initial';
    
    return `Act√∫a como un ${specialty} cl√≠nico experto realizando an√°lisis completo de caso cl√≠nico.

INFORMACI√ìN DE CONTEXTO:

TRANSCRIPCI√ìN ORIGINAL:
${transcription}

RESULTADO DEL TRIAJE PREVIO:
- Banderas Rojas Detectadas: ${triageResult.redFlags.length > 0 ? triageResult.redFlags.join(', ') : 'Ninguna'}
- Nivel de Riesgo: ${triageResult.riskLevel}
- Confianza del Triaje: ${triageResult.confidence}
- Razonamiento: ${triageResult.reasoning}

PAR√ÅMETROS DE SESI√ìN:
- Especialidad: ${specialty}
- Tipo de Sesi√≥n: ${sessionType}
- Contexto: ${triageResult.redFlags.length > 0 ? 'AN√ÅLISIS CR√çTICO - Banderas rojas presentes' : 'AN√ÅLISIS EST√ÅNDAR - Optimizaci√≥n de costos'}

INSTRUCCIONES PARA AN√ÅLISIS COMPLETO:

Bas√°ndote en toda la informaci√≥n disponible, genera un an√°lisis cl√≠nico completo que incluya:

1. **WARNINGS**: Alertas cl√≠nicas basadas en banderas rojas y patrones de riesgo identificados
2. **SUGGESTIONS**: Recomendaciones espec√≠ficas de tratamiento, seguimiento y manejo cl√≠nico
3. **SOAP_ANALYSIS**: Nota SOAP profesional completa con todas las secciones

${triageResult.redFlags.length > 0 ? 
`‚ö†Ô∏è MODO CR√çTICO ACTIVADO: Se han detectado banderas rojas en el triaje previo. Proporciona an√°lisis exhaustivo con m√°xima atenci√≥n a:
- Validaci√≥n de banderas rojas detectadas: ${triageResult.redFlags.join(', ')}
- Recomendaciones de seguimiento inmediato
- Protocolos de derivaci√≥n si es necesario
- Evaluaci√≥n de riesgo detallada` :
`‚úÖ MODO EST√ÅNDAR: Triaje no detect√≥ banderas rojas cr√≠ticas. Proporciona an√°lisis completo eficiente enfocado en:
- Manejo cl√≠nico est√°ndar
- Optimizaci√≥n del plan de tratamiento
- Educaci√≥n del paciente
- Seguimiento preventivo`}

FORMATO DE RESPUESTA - JSON ESTRUCTURADO:
{
  "warnings": [
    {
      "level": "HIGH|MEDIUM|LOW",
      "title": "T√≠tulo del warning",
      "description": "Descripci√≥n detallada del riesgo o preocupaci√≥n cl√≠nica",
      "immediate_action_required": true/false
    }
  ],
  "suggestions": [
    {
      "priority": "HIGH|MEDIUM|LOW", 
      "category": "treatment|assessment|referral|education|follow_up",
      "title": "T√≠tulo de la sugerencia",
      "description": "Descripci√≥n detallada de la recomendaci√≥n cl√≠nica",
      "implementation_timeframe": "immediate|short_term|long_term"
    }
  ],
  "soap_analysis": {
    "subjective": {
      "chief_complaint": "string",
      "history_present_illness": "string",
      "relevant_history": "string",
      "functional_status": "string"
    },
    "objective": {
      "observations": ["array de observaciones"],
      "physical_examination": "string",
      "functional_testing": "string",
      "contraindications_noted": ["array"]
    },
    "assessment": {
      "clinical_impression": "string",
      "differential_diagnosis": ["array"],
      "prognosis": "string",
      "risk_stratification": "LOW|MEDIUM|HIGH"
    },
    "plan": {
      "immediate_actions": ["array"],
      "treatment_plan": "string", 
      "referrals_needed": ["array"],
      "follow_up_schedule": "string",
      "patient_education": "string"
    }
  },
  "clinical_summary": {
    "key_findings": "string",
    "treatment_priority": "string",
    "expected_outcomes": "string",
    "safety_considerations": "string"
  }
}

RESPUESTA JSON:`;
  }

  /**
   * Parser para respuesta de an√°lisis completo
   */
  _parseCompleteAnalysisResponse(response) {
    try {
      // El VertexAIClient ya extrajo el texto limpio
      let cleanResponse = response;
      
      // Si a√∫n tiene markdown, limpiarlo
      if (typeof response === 'string' && response.includes('```')) {
        cleanResponse = response.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      }
      
      const parsed = JSON.parse(cleanResponse);
      
      this.logger.info('‚úÖ PARSING AN√ÅLISIS COMPLETO EXITOSO', {
        warningsCount: parsed.warnings?.length || 0,
        suggestionsCount: parsed.suggestions?.length || 0,
        soapSections: Object.keys(parsed.soap_analysis || {}).length
      });
      
      return parsed;
      
    } catch (error) {
      this.logger.error('‚ùå ERROR PARSING AN√ÅLISIS COMPLETO', {
        error: error.message,
        response: typeof response === 'string' ? response.substring(0, 300) : 'No es string'
      });
      
      // Fallback b√°sico
      return {
        warnings: [
          {
            level: "MEDIUM",
            title: "Error en procesamiento",
            description: "Hubo un error al procesar el an√°lisis. Se requiere revisi√≥n manual.",
            immediate_action_required: false
          }
        ],
        suggestions: [
          {
            priority: "HIGH",
            category: "assessment",
            title: "Revisi√≥n manual requerida",
            description: "Se recomienda revisi√≥n manual del caso debido a error en procesamiento autom√°tico.",
            implementation_timeframe: "immediate"
          }
        ],
        soap_analysis: {
          subjective: { chief_complaint: "Error en procesamiento - requiere revisi√≥n manual" },
          objective: { observations: ["Error en an√°lisis autom√°tico"] },
          assessment: { clinical_impression: "An√°lisis incompleto por error t√©cnico" },
          plan: { immediate_actions: ["Revisi√≥n manual del caso"] }
        },
        clinical_summary: {
          key_findings: "Error en procesamiento autom√°tico",
          treatment_priority: "Revisi√≥n manual inmediata",
          expected_outcomes: "Pendiente revisi√≥n manual",
          safety_considerations: "Requiere evaluaci√≥n profesional directa"
        }
      };
    }
  }

  // ========================================
  // M√âTODOS PRIVADOS PARA CONSTRUCCI√ìN DE PROMPTS
  // ========================================

  /**
   * Construye prompt espec√≠fico para triaje r√°pido de banderas rojas
   */
  _buildTriagePrompt(transcription, criticalRedFlags) {
    return `Act√∫a como un fisioterapeuta experto realizando triaje r√°pido de emergencias.

TRANSCRIPCI√ìN:
${transcription}

BANDERAS ROJAS CR√çTICAS A BUSCAR:
${criticalRedFlags.map(flag => `- ${flag}`).join('\n')}

INSTRUCCIONES:
1. Lee la transcripci√≥n en busca de las banderas rojas cr√≠ticas listadas
2. Identifica SOLO las banderas rojas que est√°n claramente presentes
3. Responde √öNICAMENTE con una lista simple de banderas rojas detectadas
4. Si no hay banderas rojas, responde "NINGUNA"
5. Se espec√≠fico y conciso - esta es evaluaci√≥n de emergencia (<5 segundos)

FORMATO DE RESPUESTA:
Solo lista las banderas rojas detectadas, una por l√≠nea, sin explicaciones adicionales.

EJEMPLO:
Dolor nocturno severo
P√©rdida de peso inexplicada
Fiebre persistente

RESPUESTA:`;
  }

  /**
   * Construye prompt para extracci√≥n estructurada de hechos cl√≠nicos
   */
  _buildExtractionPrompt(transcription) {
    return `Act√∫a como un asistente cl√≠nico experto en extracci√≥n de datos estructurados.

TRANSCRIPCI√ìN:
${transcription}

INSTRUCCIONES:
Extrae y estructura TODOS los hechos cl√≠nicos relevantes de la transcripci√≥n en formato JSON.
Incluye solo informaci√≥n que est√© expl√≠citamente mencionada.

FORMATO DE RESPUESTA - JSON ESTRUCTURADO:
{
  "symptoms": {
    "primary_complaint": "string",
    "pain_location": "string",
    "pain_intensity": "number/10",
    "duration": "string",
    "aggravating_factors": ["array"],
    "relieving_factors": ["array"]
  },
  "history": {
    "onset": "string",
    "previous_episodes": "boolean",
    "previous_treatments": ["array"],
    "trauma_history": "string"
  },
  "medications": {
    "current_medications": ["array"],
    "allergies": ["array"],
    "recent_medications": ["array"]
  },
  "functional_status": {
    "activities_affected": ["array"],
    "work_impact": "string",
    "sleep_impact": "string"
  },
  "physical_examination": {
    "observations": ["array"],
    "range_of_motion": "string",
    "strength": "string",
    "special_tests": ["array"]
  },
  "patient_demographics": {
    "age_mentioned": "string",
    "occupation": "string",
    "activity_level": "string"
  }
}

REGLAS:
- Solo incluir campos con informaci√≥n real de la transcripci√≥n
- Usar "null" para campos sin informaci√≥n
- Mantener exactitud a lo mencionado
- No inferir informaci√≥n no expl√≠cita

RESPUESTA JSON:`;
  }

  /**
   * Construye super-prompt final contextualizado para an√°lisis profundo
   */
  _buildFinalAnalysisPrompt(transcription, redFlags, clinicalFacts) {
    return `Act√∫a como un fisioterapeuta cl√≠nico experto realizando an√°lisis completo y generaci√≥n de nota SOAP.

INFORMACI√ìN PRE-PROCESADA:

TRANSCRIPCI√ìN ORIGINAL:
${transcription}

BANDERAS ROJAS DETECTADAS:
${redFlags.length > 0 ? redFlags.map(flag => `- ${flag}`).join('\n') : 'Ninguna bandera roja cr√≠tica detectada'}

HECHOS CL√çNICOS ESTRUCTURADOS:
${JSON.stringify(clinicalFacts, null, 2)}

INSTRUCCIONES PARA AN√ÅLISIS COMPLETO:
Usando toda la informaci√≥n pre-procesada, genera un an√°lisis cl√≠nico completo que incluya:

1. WARNINGS: Alertas cl√≠nicas basadas en banderas rojas y patrones de riesgo
2. SUGGESTIONS: Recomendaciones de tratamiento y seguimiento espec√≠ficas de fisioterapia
3. SOAP_ANALYSIS: Nota SOAP profesional completa

FORMATO DE RESPUESTA - JSON ESTRUCTURADO:
{
  "warnings": [
    {
      "id": "string",
      "severity": "HIGH|MEDIUM|LOW",
      "category": "string",
      "title": "string",
      "description": "string",
      "recommendation": "string",
      "evidence": "string"
    }
  ],
  "suggestions": [
    {
      "id": "string", 
      "type": "treatment|assessment|referral|education",
      "title": "string",
      "description": "string",
      "rationale": "string",
      "priority": "HIGH|MEDIUM|LOW"
    }
  ],
  "soap_analysis": {
    "subjective": {
      "chief_complaint": "string",
      "history_present_illness": "string", 
      "relevant_history": "string",
      "functional_goals": "string"
    },
    "objective": {
      "observation": "string",
      "palpation": "string",
      "range_of_motion": "string",
      "strength_testing": "string",
      "special_tests": "string",
      "functional_assessment": "string"
    },
    "assessment": {
      "clinical_impression": "string",
      "differential_diagnosis": ["array"],
      "prognosis": "string",
      "risk_stratification": "LOW|MEDIUM|HIGH"
    },
    "plan": {
      "immediate_actions": ["array"],
      "treatment_plan": "string", 
      "referrals_needed": ["array"],
      "follow_up_schedule": "string",
      "patient_education": "string"
    }
  },
  "clinical_summary": {
    "key_findings": "string",
    "treatment_priority": "string",
    "expected_outcomes": "string",
    "safety_considerations": "string"
  }
}

CONSIDERACIONES ESPECIALES:
- Integra las banderas rojas en warnings con alta prioridad
- Usa los hechos cl√≠nicos estructurados para completar la nota SOAP
- Mant√©n enfoque espec√≠fico de fisioterapia
- Proporciona recomendaciones accionables y espec√≠ficas
- Considera la informaci√≥n pre-procesada como datos ya validados

RESPUESTA JSON:`;
  }

  // ========================================
  // M√âTODOS PRIVADOS PARA PARSING DE RESPUESTAS
  // ========================================

  /**
   * Parsea respuesta de triaje a array de banderas rojas
   */
  _parseRedFlagsResponse(response) {
    try {
      if (!response || response.trim().toLowerCase() === 'ninguna') {
        return [];
      }
      
      return response
        .split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0 && !line.toLowerCase().includes('ninguna'))
        .slice(0, 10); // M√°ximo 10 banderas rojas
        
    } catch (error) {
      this.logger.error('Error parseando banderas rojas:', error);
      return [];
    }
  }

  /**
   * Parsea respuesta de extracci√≥n a objeto JSON de hechos cl√≠nicos
   */
  _parseClinicalFactsResponse(response) {
    try {
      // Buscar JSON en la respuesta
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
      
      this.logger.warn('No se encontr√≥ JSON v√°lido en respuesta de extracci√≥n');
      return {};
      
    } catch (error) {
      this.logger.error('Error parseando hechos cl√≠nicos:', error);
      return {};
    }
  }

  /**
   * Parsea respuesta de an√°lisis final a objeto completo
   */
  _parseFinalAnalysisResponse(response) {
    try {
      // Buscar JSON en la respuesta
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
      
      throw new Error('No se encontr√≥ JSON v√°lido en an√°lisis final');
      
    } catch (error) {
      this.logger.error('Error parseando an√°lisis final:', error);
      throw error;
    }
  }

  /**
   * Genera ID √∫nico para seguimiento de cascada
   */
  _generateCascadeId() {
    return `cascade_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
}

module.exports = ClinicalInsightService; 
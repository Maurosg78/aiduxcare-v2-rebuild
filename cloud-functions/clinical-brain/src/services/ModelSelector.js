const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [new winston.transports.Console()]
});

/**
 * MODELSELECTOR V3.0 - DECISI√ìN INTELIGENTE CON IA
 * 
 * Estrategia de dos pasos:
 * 1. Triaje inicial con Gemini-Flash para detectar banderas rojas
 * 2. Decisi√≥n inteligente: Flash vs Pro basado en resultados del triaje
 */

class ModelSelector {
  constructor(vertexClient) {
    this.vertexClient = vertexClient;
    
    // Configuraci√≥n de modelos disponibles
    this.models = {
      'gemini-2.5-pro': {
        costPerMillionTokens: 1.25,
        accuracy: 0.95,
        emergencyDetection: 1.0,
        useCase: 'Casos cr√≠ticos con banderas rojas'
      },
      'gemini-2.5-flash': {
        costPerMillionTokens: 0.15,
        accuracy: 0.87,
        emergencyDetection: 1.0,
        useCase: 'Casos est√°ndar y optimizaci√≥n de costos'
      }
    };

    // Criterios para escalado a modelo premium
    this.CRITICAL_ESCALATION_CRITERIA = [
      'dolor nocturno severo',
      'p√©rdida de peso inexplicada',
      'fiebre persistente',
      'd√©ficit neurol√≥gico',
      'dolor tor√°cico',
      'dificultad respiratoria severa',
      'p√©rdida de control de esf√≠nteres',
      'cambios visuales s√∫bitos',
      'cefalea tipo trueno',
      'sangrado inexplicado'
    ];
  }

  /**
   * M√âTODO PRINCIPAL: Selecci√≥n inteligente de modelo con triaje IA
   * 
   * @param {string} transcription - Transcripci√≥n a analizar
   * @returns {Object} Resultado con modelo seleccionado y reasoning
   */
  async selectModel(transcription) {
    const triageStartTime = Date.now();
    
    logger.info('üß† INICIANDO MODELSELECTION INTELIGENTE', {
      transcriptionLength: transcription.length,
      step: 'triaje_inicial'
    });

    try {
      // PASO 1: Triaje inicial con Gemini-Flash
      const triageResult = await this._performTriageWithAI(transcription);
      
      const triageTime = (Date.now() - triageStartTime) / 1000;
      
      // PASO 2: Decisi√≥n inteligente basada en triaje
      const decision = this._makeModelDecision(triageResult);
      
      logger.info('‚úÖ DECISI√ìN DE MODELO COMPLETADA', {
        selectedModel: decision.selectedModel,
        redFlagsDetected: triageResult.redFlags.length,
        triageTime: triageTime,
        reasoning: decision.reasoning,
        costOptimization: decision.costOptimization
      });

      return {
        selectedModel: decision.selectedModel,
        triageResult: triageResult,
        reasoning: decision.reasoning,
        costOptimization: decision.costOptimization,
        processingTime: triageTime,
        metadata: {
          triageModel: 'gemini-2.5-flash',
          analysisModel: decision.selectedModel,
          timestamp: new Date().toISOString()
        }
      };

    } catch (error) {
      logger.error('‚ùå ERROR EN SELECCI√ìN DE MODELO', {
        error: error.message,
        fallback: 'gemini-2.5-flash'
      });

      // Fallback seguro a Flash
      return {
        selectedModel: 'gemini-2.5-flash',
        triageResult: { redFlags: [], confidence: 0.5 },
        reasoning: 'Error en triaje - fallback a modelo est√°ndar por seguridad',
        costOptimization: this._calculateSavings('gemini-2.5-flash'),
        error: error.message
      };
    }
  }

  /**
   * PASO 1: Triaje inicial usando Gemini-Flash con IA real
   */
  async _performTriageWithAI(transcription) {
    const triagePrompt = `Act√∫a como un fisioterapeuta experto realizando triaje r√°pido de emergencias m√©dicas.

TRANSCRIPCI√ìN A ANALIZAR:
${transcription}

BANDERAS ROJAS CR√çTICAS A DETECTAR:
${this.CRITICAL_ESCALATION_CRITERIA.map(flag => `- ${flag}`).join('\n')}

INSTRUCCIONES:
1. Analiza la transcripci√≥n en busca de las banderas rojas cr√≠ticas listadas
2. Identifica SOLO las banderas rojas que est√°n claramente presentes en el texto
3. Eval√∫a el nivel de riesgo general del caso
4. Responde en formato JSON exacto

FORMATO DE RESPUESTA (JSON):
{
  "redFlags": ["lista de banderas rojas detectadas"],
  "riskLevel": "LOW|MEDIUM|HIGH",
  "confidence": 0.85,
  "reasoning": "Breve explicaci√≥n de la decisi√≥n"
}

EJEMPLOS:
- Si no hay banderas rojas: {"redFlags": [], "riskLevel": "LOW", "confidence": 0.90, "reasoning": "Caso est√°ndar sin alarmas"}
- Si hay banderas rojas: {"redFlags": ["dolor nocturno severo"], "riskLevel": "HIGH", "confidence": 0.95, "reasoning": "Bandera roja cr√≠tica detectada"}

RESPUESTA JSON:`;

    logger.info('üîç EJECUTANDO TRIAJE CON IA', {
      model: 'gemini-2.5-flash',
      transcriptionLength: transcription.length
    });

    const response = await this.vertexClient.processWithModel(
      transcription,
      triagePrompt,
      'gemini-2.5-flash',
      {
        maxTokens: 500,
        temperature: 0.1  // Muy baja para m√°xima consistencia
      }
    );

    return this._parseTriageResponse(response);
  }

  /**
   * PASO 2: Decisi√≥n inteligente de modelo basada en triaje
   */
  _makeModelDecision(triageResult) {
    const { redFlags, riskLevel, confidence } = triageResult;
    
    let selectedModel, reasoning, costOptimization;

    // L√≥gica de decisi√≥n: Flash vs Pro
    if (redFlags.length >= 1 || riskLevel === 'HIGH') {
      selectedModel = 'gemini-2.5-pro';
      reasoning = `¬°Banderas rojas detectadas! Escalando a modelo Pro para m√°xima seguridad. Banderas: ${redFlags.join(', ')}`;
      costOptimization = 'Inversi√≥n en seguridad cl√≠nica - An√°lisis premium requerido';
    } else if (riskLevel === 'MEDIUM' && confidence < 0.8) {
      selectedModel = 'gemini-2.5-pro';
      reasoning = 'Riesgo medio con baja confianza - Escalado preventivo a modelo Pro';
      costOptimization = 'Escalado preventivo por incertidumbre';
    } else {
      selectedModel = 'gemini-2.5-flash';
      reasoning = 'Triaje no detecta riesgos. Seleccionando modelo Flash para an√°lisis completo.';
      costOptimization = this._calculateSavings('gemini-2.5-flash');
    }

    return {
      selectedModel,
      reasoning,
      costOptimization
    };
  }

  /**
   * Parser para respuesta de triaje - VERSI√ìN CORREGIDA CR√çTICA DE SEGURIDAD
   */
  _parseTriageResponse(response) {
    try {
      logger.info('üîç DEBUGGING TRIAJE PARSER', {
        responseType: typeof response,
        isString: typeof response === 'string',
        isObject: typeof response === 'object',
        responsePreview: typeof response === 'string' ? response.substring(0, 200) : JSON.stringify(response).substring(0, 200)
      });
      
      let parsed;
      
      // CASO 1: Es string - necesita parsing JSON
      if (typeof response === 'string') {
        const cleanResponse = response.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
        parsed = JSON.parse(cleanResponse);
        
        logger.info('‚úÖ TRIAJE PARSEADO DESDE STRING', {
          redFlags: parsed.redFlags?.length || 0,
          riskLevel: parsed.riskLevel,
          confidence: parsed.confidence
        });
      }
             // CASO 2: Es objeto con propiedad text (VertexAI response)
       else if (typeof response === 'object' && response !== null && response.text) {
         const cleanResponse = response.text.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
         parsed = JSON.parse(cleanResponse);
         
         logger.info('‚úÖ TRIAJE PARSEADO DESDE OBJETO.TEXT', {
           redFlags: parsed.redFlags?.length || 0,
           riskLevel: parsed.riskLevel,
           confidence: parsed.confidence
         });
       }
       // CASO 3: Es objeto sin text - usar directamente
       else if (typeof response === 'object' && response !== null) {
         parsed = response;
         
         logger.info('‚úÖ TRIAJE USANDO OBJETO DIRECTO', {
           redFlags: parsed.redFlags?.length || 0,
           riskLevel: parsed.riskLevel,
           confidence: parsed.confidence
         });
       }
      // CASO 3: Tipo inv√°lido
      else {
        throw new Error(`Tipo de respuesta inv√°lido: ${typeof response}`);
      }
      
      // VALIDACI√ìN CR√çTICA DE SEGURIDAD
      const result = {
        redFlags: Array.isArray(parsed.redFlags) ? parsed.redFlags : [],
        riskLevel: ['LOW', 'MEDIUM', 'HIGH'].includes(parsed.riskLevel) ? parsed.riskLevel : 'LOW',
        confidence: typeof parsed.confidence === 'number' ? parsed.confidence : 0.7,
        reasoning: typeof parsed.reasoning === 'string' ? parsed.reasoning : 'An√°lisis completado'
      };
      
      logger.info('üõ°Ô∏è TRIAJE VALIDADO PARA SEGURIDAD', {
        redFlagsCount: result.redFlags.length,
        redFlagsList: result.redFlags,
        riskLevel: result.riskLevel,
        confidence: result.confidence,
        escalationRequired: result.redFlags.length >= 1 || result.riskLevel === 'HIGH'
      });
      
      return result;
      
    } catch (error) {
      logger.error('‚ùå ERROR CR√çTICO EN TRIAJE PARSER', {
        error: error.message,
        responseType: typeof response,
        responsePreview: typeof response === 'string' ? response.substring(0, 200) : JSON.stringify(response).substring(0, 200)
      });
      
      // Fallback ultra-seguro
      return {
        redFlags: [],
        riskLevel: 'LOW',
        confidence: 0.5,
        reasoning: `Error en parsing - fallback seguro. Error: ${error.message}`
      };
    }
  }

  /**
   * C√°lculo de ahorros vs modelo premium
   */
  _calculateSavings(selectedModel) {
    if (selectedModel === 'gemini-2.5-flash') {
      return {
        savingsVsPro: '88% ahorro vs Pro',
        costRatio: '8.3x m√°s econ√≥mico',
        message: 'Optimizaci√≥n de costos manteniendo calidad cl√≠nica'
      };
    }
    
    return {
      savingsVsPro: 'Modelo premium seleccionado',
      costRatio: 'M√°xima calidad para casos cr√≠ticos',
      message: 'Inversi√≥n justificada en seguridad cl√≠nica'
    };
  }

  /**
   * Obtiene informaci√≥n de todos los modelos disponibles
   */
  getAvailableModels() {
    return this.models;
  }

  /**
   * Fuerza el uso de un modelo espec√≠fico (para testing)
   */
  forceModel(modelName) {
    if (!this.models[modelName]) {
      throw new Error(`Modelo no disponible: ${modelName}`);
    }

    logger.info(`üîß FORZANDO USO DE MODELO: ${modelName}`);
    
    return {
      selectedModel: modelName,
      triageResult: { redFlags: [], riskLevel: 'FORCED' },
      reasoning: 'Modelo forzado por configuraci√≥n de testing',
      costOptimization: 'N/A - Modo testing',
      forced: true
    };
  }

  /**
   * Estad√≠sticas de optimizaci√≥n
   */
  getOptimizationStats() {
    return {
      triageModel: 'gemini-2.5-flash',
      standardModel: 'gemini-2.5-flash',
      premiumModel: 'gemini-2.5-pro',
      escalationCriteria: this.CRITICAL_ESCALATION_CRITERIA.length + ' banderas rojas monitoreadas',
      avgCostSavings: '88% en casos est√°ndar',
      clinicalSafety: '100% - triaje con IA real'
    };
  }
}

module.exports = ModelSelector; 
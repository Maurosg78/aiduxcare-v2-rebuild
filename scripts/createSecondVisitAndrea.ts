/**
 * Script para crear una segunda visita de seguimiento para Andrea Bult√≥
 * 
 * Este script debe ejecutarse despu√©s de createClinicalCase.ts para tener una
 * visita previa con la que realizar el seguimiento longitudinal.
 */
import "dotenv/config";
import { createClient } from "@supabase/supabase-js";
import { v4 as uuidv4 } from "uuid";

// Configuraci√≥n Supabase
const supabaseUrl = process.env.SUPABASE_URL || "";
const supabaseKey = process.env.SUPABASE_ANON_KEY || "";

if (!supabaseUrl || !supabaseKey) {
  console.error("Error: Variables de entorno de Supabase no definidas");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Datos para la segunda visita
interface Patient {
  id: string;
  full_name: string;
  user_id: string;
}

interface Visit {
  id: string;
  patient_id: string;
  professional_id: string;
  date: string;
  status: "scheduled" | "in_progress" | "completed" | "cancelled";
  notes?: string;
}

interface MCPContext {
  contextual: {
    source: string;
    data: Array<{
      id: string;
      type: string;
      content: string;
      metadata?: Record<string, unknown>;
      timestamp?: string;
      created_at?: string;
    }>;
  };
  persistent: {
    source: string;
    data: Array<{
      id: string;
      type: string;
      content: string;
      metadata?: Record<string, unknown>;
      timestamp?: string;
      created_at?: string;
    }>;
  };
  semantic: {
    source: string;
    data: Array<{
      id: string;
      type: string;
      content: string;
      metadata?: Record<string, unknown>;
      timestamp?: string;
      created_at?: string;
    }>;
  };
}

// Funci√≥n para crear una nueva visita y registrar evoluci√≥n del caso
async function createSecondVisit() {
  try {
    console.log("üîÑ Iniciando creaci√≥n de segunda visita para Andrea Bult√≥...");

    // 1. Buscar el paciente Andrea Bult√≥
    const { data: patients, error: patientError } = await supabase
      .from("patients")
      .select("*")
      .ilike("full_name", "%Andrea Bult√≥%")
      .limit(1);

    if (patientError || !patients || patients.length === 0) {
      console.error("Error: No se encontr√≥ a la paciente Andrea Bult√≥", patientError);
      return;
    }

    const patient = patients[0] as Patient;
    console.log(`‚úÖ Paciente encontrada: ${patient.full_name} (${patient.id})`);

    // 2. Buscar la primera visita
    const { data: visits, error: visitsError } = await supabase
      .from("visits")
      .select("*")
      .eq("patient_id", patient.id)
      .order("date", { ascending: false })
      .limit(1);

    if (visitsError || !visits || visits.length === 0) {
      console.error("Error: No se encontraron visitas previas para la paciente", visitsError);
      return;
    }

    const firstVisit = visits[0] as Visit;
    console.log(`‚úÖ Visita previa encontrada: ${firstVisit.id} (${new Date(firstVisit.date).toLocaleDateString()})`);

    // 3. Crear nueva visita (2 semanas despu√©s de la primera)
    const firstVisitDate = new Date(firstVisit.date);
    const secondVisitDate = new Date(firstVisitDate);
    secondVisitDate.setDate(firstVisitDate.getDate() + 14); // 2 semanas despu√©s

    const secondVisitId = uuidv4();
    const { data: newVisit, error: visitError } = await supabase
      .from("visits")
      .insert({
        id: secondVisitId,
        patient_id: patient.id,
        professional_id: patient.user_id, // Mismo profesional
        date: secondVisitDate.toISOString(),
        status: "completed",
        notes: "Seguimiento de dolor lumbo-cervical - Evaluaci√≥n de evoluci√≥n y respuesta al tratamiento"
      })
      .select()
      .single();

    if (visitError || !newVisit) {
      console.error("Error: No se pudo crear la segunda visita", visitError);
      return;
    }

    console.log(`‚úÖ Segunda visita creada: ${newVisit.id} (${new Date(newVisit.date).toLocaleDateString()})`);

    // 4. Obtener contexto de la primera visita
    const { data: prevContextData, error: prevContextError } = await supabase
      .from("mcp_contexts")
      .select("context")
      .eq("visit_id", firstVisit.id)
      .single();

    if (prevContextError || !prevContextData) {
      console.error("Error: No se pudo obtener el contexto previo", prevContextError);
      return;
    }

    const prevContext = prevContextData.context as MCPContext;

    // 5. Crear contexto para la segunda visita (modificando aspectos del primero)
    const secondContext: MCPContext = {
      // Copiar estructura b√°sica
      ...prevContext,
      
      // Actualizar contexto con informaci√≥n de evoluci√≥n
      contextual: {
        source: "manual",
        data: [
          // Informaci√≥n actual
          {
            id: uuidv4(),
            type: "contextual",
            content: "Paciente Andrea Bult√≥ acude a consulta de seguimiento por dolor lumbo-cervical. Refiere mejor√≠a parcial tras 2 semanas de tratamiento. El dolor cervical ha disminuido de 8/10 a 4/10 en escala EVA. Persiste molestia lumbar especialmente despu√©s de estar sentada por per√≠odos prolongados.",
            timestamp: new Date().toISOString(),
            created_at: new Date().toISOString()
          },
          {
            id: uuidv4(),
            type: "contextual",
            content: "Examen f√≠sico: Reducci√≥n de contractura en trapecio bilateral. Mejor√≠a en rango de movilidad cervical. Test de Las√®gue negativo bilateral. Persistencia de puntos gatillo en regi√≥n lumbar.",
            timestamp: new Date().toISOString(),
            created_at: new Date().toISOString()
          },
          {
            id: uuidv4(),
            type: "contextual",
            content: "Ha cumplido con ejercicios indicados y medicaci√≥n. Refiere dificultad para mantener postura correcta durante jornada laboral.",
            timestamp: new Date().toISOString(),
            created_at: new Date().toISOString()
          }
        ]
      },
      
      // Mantener datos persistentes, actualizando solo lo que ha cambiado
      persistent: {
        source: prevContext.persistent.source,
        data: [
          ...prevContext.persistent.data.filter(block => 
            !block.content.includes("dolor lumbar") && 
            !block.content.includes("medicaci√≥n actual")
          ),
          // Actualizar datos persistentes con nueva informaci√≥n
          {
            id: uuidv4(),
            type: "persistent",
            content: "Evoluci√≥n del dolor lumbar: Mejor√≠a parcial tras 2 semanas de tratamiento. Reducci√≥n de intensidad de 8/10 a 4-5/10 en escala EVA.",
            timestamp: new Date().toISOString(),
            created_at: new Date().toISOString()
          },
          {
            id: uuidv4(),
            type: "persistent",
            content: "Medicaci√≥n actual: Complet√≥ ciclo de AINE. Actualmente solo paracetamol 1g seg√∫n necesidad (refiere tomar 1-2 comprimidos por semana).",
            timestamp: new Date().toISOString(),
            created_at: new Date().toISOString()
          }
        ]
      },
      
      // Mantener y expandir aspectos sem√°nticos
      semantic: prevContext.semantic
    };

    // 6. Guardar el nuevo contexto
    const { error: contextError } = await supabase
      .from("mcp_contexts")
      .insert({
        visit_id: secondVisitId,
        context: secondContext,
        created_by: patient.user_id,
        updated_by: patient.user_id,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });

    if (contextError) {
      console.error("Error: No se pudo guardar el contexto de la segunda visita", contextError);
      return;
    }

    console.log("‚úÖ Contexto cl√≠nico de segunda visita guardado");

    // 7. Registrar logs de auditor√≠a para la nueva visita
    const auditLogs = [
      {
        timestamp: new Date().toISOString(),
        user_id: patient.user_id,
        event_type: "visit.create",
        details: {
          description: `Creaci√≥n de visita de seguimiento para ${patient.full_name}`
        },
        visit_id: secondVisitId
      },
      {
        timestamp: new Date(new Date().getTime() + 2 * 60000).toISOString(), // 2 minutos despu√©s
        user_id: patient.user_id,
        event_type: "emr.form.update",
        details: {
          description: "Actualizaci√≥n de formulario SOAP - Secci√≥n subjetiva"
        },
        visit_id: secondVisitId
      },
      {
        timestamp: new Date(new Date().getTime() + 5 * 60000).toISOString(), // 5 minutos despu√©s
        user_id: patient.user_id,
        event_type: "emr.form.update",
        details: {
          description: "Actualizaci√≥n de formulario SOAP - Secci√≥n objetiva"
        },
        visit_id: secondVisitId
      },
      {
        timestamp: new Date(new Date().getTime() + 8 * 60000).toISOString(), // 8 minutos despu√©s
        user_id: patient.user_id,
        event_type: "ai.suggestion",
        details: {
          description: "Sugerencia generada: Actualizaci√≥n de plan terap√©utico"
        },
        visit_id: secondVisitId,
        source: "ia"
      },
      {
        timestamp: new Date(new Date().getTime() + 10 * 60000).toISOString(), // 10 minutos despu√©s
        user_id: patient.user_id,
        event_type: "suggestion.integrated",
        details: {
          description: "Sugerencia integrada: Actualizaci√≥n de plan terap√©utico"
        },
        visit_id: secondVisitId,
        source: "ia"
      },
      {
        timestamp: new Date(new Date().getTime() + 15 * 60000).toISOString(), // 15 minutos despu√©s
        user_id: patient.user_id,
        event_type: "visit.completed",
        details: {
          description: `Visita de seguimiento completada para ${patient.full_name}`
        },
        visit_id: secondVisitId
      }
    ];

    // Insertar logs de auditor√≠a
    const { error: auditError } = await supabase
      .from("audit_logs")
      .insert(auditLogs);

    if (auditError) {
      console.error("Error: No se pudieron registrar los logs de auditor√≠a", auditError);
      return;
    }

    console.log("‚úÖ Logs de auditor√≠a registrados para la segunda visita");
    console.log("\nüéâ Segunda visita creada exitosamente para Andrea Bult√≥!");
    console.log(`üîç ID de la visita: ${secondVisitId}`);
    console.log(`üìÖ Fecha: ${new Date(secondVisitDate).toLocaleDateString()}`);
    console.log("\n‚úÖ Ya puedes ver la traza longitudinal en la UI accediendo a la ficha del paciente.");

  } catch (error) {
    console.error("Error general en el proceso:", error);
  }
}

// Ejecutar la funci√≥n principal
createSecondVisit(); 